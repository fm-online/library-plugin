{
    "pipes": [],
    "interfaces": [
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "projects/fm-library/src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "HelperService",
            "id": "injectable-HelperService-2b96cd75eb47604cc4813a3a622b0d6580b67f3b1737174e19aa32b7e6c22e07753fe45dbe47a9f4dd4e204041cbe74648c98214b96c9ab33dd79e7ff5f1ba67",
            "file": "projects/fm-library/src/lib/services/helper.service.ts",
            "properties": [
                {
                    "name": "displaySizeDesktopL",
                    "defaultValue": "1920",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "displaySizeDesktopM",
                    "defaultValue": "1366",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "displaySizeDesktopS",
                    "defaultValue": "1280",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "displaySizeSmallest",
                    "defaultValue": "540",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "displaySizeTablet",
                    "defaultValue": "1024",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "getHeight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "convertMobileFont",
                    "args": [
                        {
                            "name": "baseSize",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "factor",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "baseSize",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "factor",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isBiggerThanFullHD",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isMobile",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isMobileOrTablet",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSmallest",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateScreenSizes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class HelperService {\n\n  public getWidth: any;\n  public getHeight: any;\n\n  private displaySizeSmallest = 540;\n  private displaySizeTablet = 1024;\n  private displaySizeDesktopS = 1280;\n  private displaySizeDesktopM = 1366;\n  private displaySizeDesktopL = 1920;\n\n  constructor() {\n    this.getWidth = window.innerWidth;\n    this.getHeight = window.innerHeight;\n  }\n\n  public updateScreenSizes() {\n    this.getWidth = window.innerWidth;\n    this.getHeight = window.innerHeight;\n  }\n\n  isSmallest() {\n    return this.getWidth < this.displaySizeSmallest ? true : false;\n  }\n\n  isMobile() {\n    return this.getWidth < this.displaySizeTablet ? true : false;\n  }\n\n  isMobileOrTablet() {\n    return this.getWidth < this.displaySizeDesktopS ? true : false;\n  }\n\n  isBiggerThanFullHD() {\n    return this.getWidth > this.displaySizeDesktopL ? true : false;\n  }\n\n  convertMobileFont(baseSize: string, factor: number) {\n    const sizeNumber = parseInt(baseSize.substring(0, baseSize.length - 2));\n    const mobileSizeNumber = sizeNumber * factor;\n    return mobileSizeNumber.toString() + 'px';\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-24e8da4e47cb642ca826afb2b61abad4ca5f6d1be23960bfd4cff21cdd5c5dd201246f511847ef5e58cc4c5a18eb59788264995398b564eed9fd94577577fa1a",
            "file": "projects/fm-library/src/lib/buttons/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "iconButton",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconLeft",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "iconRight",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HelperService",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onWindowResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostListener, Input,Output } from '@angular/core';\nimport { HelperService } from '../../services/helper.service';\n\n@Component({\n  selector: 'lib-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.scss']\n})\nexport class ButtonComponent {\n  @Input() iconButton: boolean = false;\n  @Input() light: boolean = false;\n  @Input() type!: string;\n  @Input() value!: string;\n  @Input() label!: string;\n  @Input() icon: any;\n  @Input() disabled: boolean = false;\n  @Input() iconLeft: any;\n  @Input() iconRight: any;\n  @Input() width!: string;\n  @Input() autoWidth: boolean = false;\n  @Output() public buttonValue:EventEmitter<any> = new EventEmitter<string>();\n\n  constructor(\n    public screen: HelperService\n  ) {}\n\n  @HostListener('window:resize', ['$event'])\n  onWindowResize() {\n    this.screen.updateScreenSizes();\n  }\n\n  getValue() {\n    this.buttonValue.emit(this.type);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\"; \n\n.da-button-single {\n    font-family: $font;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    &:hover > .da-button-icon-label{\n        display: block;\n    }\n\n    button {\n        width: 160px;\n        height: 50px;\n        border: 1px solid $button-base-color;\n        color: $button-base-color;\n        fill: $button-base-color;\n        font-size: $t2-base-size;\n        font-family: $font;\n        border-radius: 25px 25px 25px 0;\n        background: transparent;\n        display: flex;\n        justify-content: space-between;\n        align-items: center;\n        padding: 0 5px;\n        cursor: pointer;\n\n        &.mobile {\n            width: 104px;\n            height: 40px;\n            font-size: 20px;\n        }\n\n        &.light {\n            border: 1px solid $input-secondary-color;\n            color: $input-secondary-color;\n            fill: $input-secondary-color;\n        }\n\n        &.short {\n            width: 50px;\n            justify-content: center;\n\n            &.mobile {\n                width: 40px;\n            }\n        }\n\n        &.auto-width {\n            width: 100%;\n\n        }\n\n        &:hover,\n        &:active {\n            border: 1px solid $button-base-color;\n            background: $button-base-color;\n            color: $t2-secondary-color;\n            fill: $t2-secondary-color;\n\n            &.light {\n                border: 1px solid $input-secondary-color;\n                background: $input-secondary-color;\n                color: $t2-base-color;\n                fill: $t2-base-color;\n            }\n        }\n\n        &:active {\n            padding: 0;\n        }\n\n        &.disabled {\n            opacity: 0.2;\n        }\n\n        .da-button-label {\n            width: 100%;\n            text-align: center;\n            display: block;\n            white-space: nowrap;\n        }\n\n        .da-button-icon {\n            display: flex;\n            align-items: flex-end;\n            \n            svg {\n                height: 14px;\n                width: auto;\n            }\n            &.left {\n                margin-left: 10px;\n            }\n\n            &.right {\n                margin-right: 10px;\n            }\n\n            &.main {\n                svg {\n                    height: 28px;\n                    width: auto;\n                }\n\n                &.mobile {\n                    svg {\n                        height: 20px;\n                    }\n                }\n            }\n        }\n    }\n\n    .da-button-icon-label {\n        font-family: $font;\n        color: $button-base-color;\n        display: none;\n        position: absolute;\n        white-space: nowrap;\n        bottom: -25px;\n\n        &.light {\n            color: $input-secondary-color;\n        }\n    }\n}",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"da-button-single\">\n    <button \n        (click)=\"getValue()\" \n        [ngClass]=\"{'light' : light, 'short' : iconButton, 'disabled' : disabled, 'auto-width' : autoWidth, 'mobile' : screen.isSmallest()}\" \n        [disabled]=\"disabled\"\n        [ngStyle]=\"{'width': width && screen.isSmallest() ? '100%' : width && !screen.isSmallest() ? width + 'px' : ''}\"\n        #target\n    >\n        <svg-icon *ngIf=\"iconLeft\" \n            class=\"da-button-icon left\" \n            [src]=\"iconLeft\"\n        >\n        </svg-icon>\n        <span class=\"da-button-label\" *ngIf=\"value\" [ngStyle]=\"{'margin': width && screen.isSmallest() ? '0 20px' : ''}\" >{{ value | translate }}</span> \n        <svg-icon *ngIf=\"icon\" \n            class=\"da-button-icon main\" \n            [ngClass]=\"{'mobile' : screen.isSmallest()}\"\n            [src]=\"icon\"\n        >\n        </svg-icon>\n        <svg-icon *ngIf=\"iconRight\" \n            class=\"da-button-icon right\" \n            [src]=\"iconRight\"\n        >\n        </svg-icon>\n    </button>\n    <div *ngIf=\"icon\" class=\"da-button-icon-label\" [ngClass]=\"{'light' : light}\">{{label | translate}}</div>\n</div>\n"
        },
        {
            "name": "ButtonGroupComponent",
            "id": "component-ButtonGroupComponent-fb3c7e29c63b27473c7364f74442c32766134032941ec320c9b5eb2c46f15a197645c3dd066a4fe59752865c950d823ea95ee802f8f914fd2b67bcc6cf579eac",
            "file": "projects/fm-library/src/lib/buttons/button-group/button-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-button-group",
            "styleUrls": [
                "./button-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "buttons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "custom",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonValue",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "localValue",
                    "defaultValue": "'localValue'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HelperService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onWindowResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ]
                },
                {
                    "name": "sendValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';\nimport { HelperService } from '../../services/helper.service';\n\n@Component({\n  selector: 'lib-button-group',\n  templateUrl: './button-group.component.html',\n  styleUrls: ['./button-group.component.scss']\n})\nexport class ButtonGroupComponent implements OnInit {\n  @Input() buttons: any;\n  @Input() light: boolean = false;\n  @Input() custom: boolean = false;\n  localValue: string = 'localValue';\n  @Output() public buttonValue: EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    public screen: HelperService\n  ) { }\n\n  @HostListener('window:resize', ['$event'])\n    onWindowResize() {\n      this.screen.updateScreenSizes();\n  }\n\n  ngOnInit(): void {\n  }\n\n  sendValue(e: any) {\n    this.localValue = e;\n    this.buttonValue.emit(e);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".da-buttons {\n    width: 100%;\n    display: flex;\n    column-gap: 24px;\n    row-gap: 24px;\n    flex-wrap: wrap;\n    justify-content: center;\n    max-width: 1366px;\n\n    &.mobile {\n        column-gap: 10px;\n\n        &.custom {\n            justify-content: flex-start;\n\n            lib-button:nth-child(1) {\n                order: 2;\n            }\n            lib-button:nth-child(2) {\n                order: 3;\n            }\n        }\n    }\n}",
                    "styleUrl": "./button-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"da-buttons\" [ngClass]=\"{'mobile' : screen.isSmallest(), 'custom' : custom}\" >\n    <ng-container *ngFor=\"let button of buttons; let num = index\">\n        <lib-button \n            [label]=\"button.label\"\n            [light]=\"light\"\n            [type]=\"button.type\"\n            [iconButton]=\"button.iconButton\"\n            [icon]=\"button.icon\"\n            [width]=\"button.width\"\n            [iconRight]=\"button.iconRight\"\n            [iconLeft]=\"button.iconLeft\"\n            [disabled]=\"button.disabled\"\n            [value]=\"button.value\"\n            (buttonValue)=\"sendValue($event)\">\n        </lib-button>\n    </ng-container>\n</div>"
        },
        {
            "name": "CounterComponent",
            "id": "component-CounterComponent-d7d6fe0fba3536dc9cfad0c2b51b23583bf846977bb5641acae87a608c92b5ecf077dbe889d882dbc50dd8c4d8440af4053033e4762972c53bb19a90799dd664",
            "file": "projects/fm-library/src/lib/counter/counter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-counter",
            "styleUrls": [
                "./counter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./counter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'test'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "'0 00'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "step",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "counterValue",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "count",
                    "args": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "step",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "step",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'lib-counter',\n  templateUrl: './counter.component.html',\n  styleUrls: ['./counter.component.scss']\n})\nexport class CounterComponent implements OnInit {\n  @Input() name: string = 'test';\n  @Input() placeholder: string = '0 00';\n  @Input() value: number = 0;\n  @Input() step: number = 1;\n  @Input() min: number = 0;\n  @Input() max: number = 10;\n  @Input() light: boolean = false;\n\n  @Output() public counterValue:EventEmitter<any> = new EventEmitter<number>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  count(element: any, type: string, min: number, max: number, step: number) {\n    let newCount, oldCount;\n\n    if (element.value !== '') {\n      oldCount = parseInt(element.value);\n      if (type === 'up') {\n        if(element.value < max) {\n          newCount = oldCount + step;\n        } else {\n          newCount = max\n        }\n        element.value = newCount;\n      } else {\n        if(element.value > min) {\n          newCount = oldCount - step;\n        } else {\n          newCount = min\n        }\n        element.value = newCount;\n      }\n    } else {\n      newCount = min\n      element.value = newCount;\n    }\n\n    this.counterValue.emit(newCount);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../styles.scss\"; \n\n.da-counter-wrapper {\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    width: 155px;\n    height: 42px;\n\n    .da-counter {\n        font-family: $font;\n        width: 65px;\n        height: 42px;\n        border-radius: 21px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background-color: #fff;\n        box-shadow: 0 3px 5px $shadow-base-color;\n\n        &.light {\n            box-shadow: 0 3px 5px $shadow-secondary-color;\n        }\n    \n        input {\n            border: none;\n            text-align: center;\n            width: 35px;\n            padding: 0;\n            font-family: $font;\n            font-size: $t2-base-size;\n        }\n    }\n    .da-counter-btn {\n        color: $button-base-color;\n        fill: $button-base-color;\n        border: none;\n        width: 30px;\n        height: 30px;\n        border-radius: 15px;\n        background-color: #fff;\n        box-shadow: 0 3px 5px $shadow-base-color;\n        cursor: pointer;\n\n        svg {\n            margin-top: 2px;\n        }\n\n        &.light {\n            box-shadow: 0 3px 5px $shadow-secondary-color;\n        }\n\n        &:hover {\n            background-color: $button-base-color;\n            color: #fff;\n            fill: #fff;\n\n            &.light {\n                background-color: $button-secondary-color;\n                color: $button-base-color;\n                fill: $button-base-color;\n            }\n        }\n\n        &:active {\n            background-color: $button-base-color;\n            color: #fff;\n            fill: #fff;\n\n            &.light {\n                background-color: $button-secondary-color;\n                color: $button-base-color;\n                fill: $button-base-color;\n            }\n        }\n    }\n}\n\n",
                    "styleUrl": "./counter.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"da-counter-wrapper\">\n    <button \n        type=\"button\" \n        class=\"da-counter-btn left\" \n        (click)=\"count(counter, 'down', min, max, step)\"\n        [ngClass]=\"{'light' : light}\"\n    >\n        <svg-icon class=\"da-switch-icon\" src=\"assets/images/minus.svg\"></svg-icon>\n    </button>\n    <label class=\"da-counter\" [ngClass]=\"{'light' : light}\">\n        <input\n        type=\"string\" \n        [placeholder]=\"placeholder\"\n        [step]=step\n        [min]=min\n        [max]=max\n        #counter\n        [name]=\"name\"\n        [value]=value />\n    </label>\n    <button \n        type=\"button\" \n        class=\"da-counter-btn right\" \n        (click)=\"count(counter, 'up', min, max, step)\"\n        [ngClass]=\"{'light' : light}\"\n    >\n        <svg-icon class=\"da-switch-icon\" src=\"assets/images/plus.svg\"></svg-icon>\n    </button>\n</div>\n"
        },
        {
            "name": "DropdownComponent",
            "id": "component-DropdownComponent-83b1a96becc5ae67c07afb77526cdcb6d55763d62b9ef113b0664dcd979ea74bd17b9387f5ae79c5521a2734305889cc5e8056f9740cfacc6485ef857ed9e548",
            "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-dropdown",
            "styleUrls": [
                "./dropdown.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./dropdown.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'assets/images/circleCheck.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "info",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selectedItem",
                    "defaultValue": "{'value': '', 'viewValue': 'bitte auswählen'}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "selectItems",
                    "defaultValue": "[{'value': '', 'viewValue': 'bitte auswählen'}]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "infoValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "selectValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getInfo",
                    "args": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'lib-dropdown',\n  templateUrl: './dropdown.component.html',\n  styleUrls: ['./dropdown.component.scss']\n})\nexport class DropdownComponent {\n  @Input() name!: string;\n  @Input() label!: string;\n  @Input() selectItems: any = [{'value': '', 'viewValue': 'bitte auswählen'}];\n  @Input() icon: string = 'assets/images/circleCheck.svg';\n  @Input() light: boolean = false;\n  @Input() info: string = '';\n  @Input() selectedItem: any = {'value': '', 'viewValue': 'bitte auswählen'};\n  @Input() autoWidth: boolean = false;\n  @Input() success: boolean = false;\n\n  @Output() public selectValue:EventEmitter<any> = new EventEmitter<string>();\n  @Output() public infoValue:EventEmitter<any> = new EventEmitter<string>();\n\n  constructor() { }\n\n  getValue(e: any) {\n    this.success = true;\n    this.selectValue.emit(e);\n  }\n\n  getInfo(e: string) {\n    this.infoValue.emit(e);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\"; \n\n.mat-option,\n.mat-select {\n    font-family: $font!important;\n    color: $button-base-color!important;\n}\n\n.mat-select {\n    padding-top: 4px!important;\n}\n\n.mat-option {\n text-align: center!important;\n border-radius: 24px!important;\n\n &:hover {\n     background-color: $radiobutton-base-color!important;\n }\n}\n\n.mat-option-disabled {\n    opacity: 0.5!important;\n}\n\n.mat-form-field {\n    margin-top: -8px!important;\n    font-family: $font!important;\n    width: 185px!important;\n    text-align: center!important;\n}\n\n.da-input-select-single {\n    font-family: $font!important;\n    position: relative;\n    background: #fff;\n    border-radius: 24px;\n    border: 0px solid transparent;\n    border-bottom: 1px solid $button-base-color;\n    box-shadow: 0 3px 5px $shadow-base-color;\n    height: 42px;\n    width: 185px;\n\n    &.auto-width {\n        width: 100%;\n\n        .mat-form-field {\n            width: 100%!important;\n        }\n    }\n\n    &.light {\n        box-shadow: 0 3px 5px $shadow-secondary-color;\n    }\n\n    .da-input-select-label {\n        font-size: $t4-base-size;\n        top: -18px;\n        position: absolute;\n        margin-left: 20px;\n        color: $t4-base-color;\n    \n        &.light {\n            color: $t4-secondary-color;\n        }\n    }\n\n    .da-input-select {\n        display: flex;\n        align-items: start;\n\n        .da-input-info-button {\n            top: 5px;\n            position: absolute;\n            right: -29px;\n        }\n    }\n\n    .da-input-select-success-icon {\n        color: $success-color;\n        fill: $success-color;\n        margin-top: 8px;\n        margin-left: 8px;\n        position: absolute;\n        font-size: 25px;\n        width: 23px;\n        height: 23px;\n        border-radius: 25px;\n        box-shadow: 0 3px 5px $shadow-base-color;\n\n    }\n}",
                    "styleUrl": "./dropdown.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 20
            },
            "templateData": "\n<div class=\"da-input-select-single\" [ngClass]=\"{'light' : light, 'auto-width' : autoWidth}\">\n  <div class=\"da-input-select-label\" [ngClass]=\"{'light' : light}\">{{label}}</div>\n  <label class=\"da-input-select\">\n    <svg-icon [src]=\"icon\" class=\"da-input-select-success-icon\" *ngIf=\"success\"></svg-icon>\n    <mat-form-field appearance=\"fill\" class=\"da-input-select-select\">\n      <mat-select \n        (valueChange)=\"getValue($event)\" \n        [(value)]=\"selectedItem.value\"\n      >\n        <mat-option disabled [value]=\"selectedItem.value\">{{selectedItem.viewValue | translate}}</mat-option>\n        <mat-option *ngFor=\"let item of selectItems\" [value]=\"item.value\">\n          {{item.viewValue | translate}}\n        </mat-option>\n      </mat-select>\n    </mat-form-field>\n    <div class=\"da-input-info-button\" *ngIf=\"info\">\n        <lib-info-button \n          [light]=\"light\" \n          [id]=\"info\"\n          (infoPressed)=\"getInfo($event)\"\n        ></lib-info-button>\n    </div>\n  </label>\n</div>"
        },
        {
            "name": "HeaderButtonComponent",
            "id": "component-HeaderButtonComponent-a7c5a986f9649ca84adf3206619d0f6f3723313ffe2fcd3e67aa73b8159b3472f5d6afdd9ca52467090009a13fb954b688bfa25a97bf984d477d169abfd3aa84",
            "file": "projects/fm-library/src/lib/buttons/header-button/header-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-header-button",
            "styleUrls": [
                "./header-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "active",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "inactive",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HelperService",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onWindowResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostListener, Input, Output } from '@angular/core';\nimport { HelperService } from '../../services/helper.service';\n\n@Component({\n  selector: 'lib-header-button',\n  templateUrl: './header-button.component.html',\n  styleUrls: ['./header-button.component.scss']\n})\nexport class HeaderButtonComponent {\n  @Input() inactive: boolean = false;\n  @Input() active: boolean = false;\n  @Input() type!: string;\n  @Input() value!: string;\n  @Input() label!: string;\n  @Input() icon: any;\n  @Input() disabled: boolean = false;\n  @Output() public buttonValue:EventEmitter<any> = new EventEmitter<string>();\n\n  constructor(\n    public screen: HelperService\n  ) {}\n\n  @HostListener('window:resize', ['$event'])\n    onWindowResize() {\n      this.screen.updateScreenSizes();\n  }\n\n  getValue() {\n    this.buttonValue.emit(this.type);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\"; \n\n.da-header-button-single {\n    font-family: $font;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    button {\n        border: none;\n        min-height: 22px;\n        min-width: 22px;\n        color: $button-base-color;\n        font-size: $t1-base-size;\n        font-family: $font;\n        transition: all 0.4s ease-in-out 0s, visibility 0s;\n        border-radius: 25px;\n        background: transparent;\n        padding: 8px 12px;\n        cursor: pointer;\n\n        &.mobile {\n            min-height: 20px;\n            min-width: 20px;\n        }\n\n        &:hover,\n        &:active {\n            background: $body-base-color;\n        }\n\n        &.inactive {\n            color: $body-base-color;\n\n            &:hover,\n            &:active {\n                color: $button-base-color;\n            }\n        }\n\n        &.active, \n        &.disabled {\n            cursor: default;\n\n            &:hover,\n            &:active {\n                background: transparent;\n            }\n        }\n        &.disabled {\n            opacity: 0.2;\n        }\n        &.icon {\n            padding: 5px 10px;\n        }\n\n        .da-header-button-label {\n            width: 100%;\n            text-align: center;\n            display: block;\n        }\n\n        .da-header-button-icon {\n            font-size: 22px;\n            fill: $button-base-color;\n\n                &.mobile {\n                    font-size: 20px;\n                }\n        }\n    }\n}",
                    "styleUrl": "./header-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"da-header-button-single\">\n    <button \n        (click)=\"getValue()\" \n        [ngClass]=\"{'inactive' : inactive, 'active' : active, 'disabled' : disabled, 'icon' : icon, 'mobile' : screen.isSmallest()}\" \n        [disabled]=\"disabled || active\"\n        #target\n    >\n        <svg-icon  *ngIf=\"icon; else buttonLabel\" \n            class=\"da-header-button-icon\" \n            [ngClass]=\"{'mobile' : screen.isSmallest()}\"\n            [src]=\"icon\"\n        >\n        </svg-icon>\n        <ng-template class=\"da-header-button-label\" #buttonLabel>\n            <span>\n                {{ value | translate }}\n            </span>\n        </ng-template> \n    </button>\n</div>"
        },
        {
            "name": "HeaderTextComponent",
            "id": "component-HeaderTextComponent-fb19358393563a58dcfb517d99a2afb224e95bfa5e79bd5bd727ac0a381b7f1ada8f7abd251281075d1a6e2ea40b6887404dcac2d7436a7ea31fd953b03653bc",
            "file": "projects/fm-library/src/lib/text/header-text/header-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-header-text",
            "styleUrls": [
                "./header-text.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-text.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "convertMobile",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "info",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'38px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "thin",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "infoValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "mobileLineHeight",
                    "defaultValue": "'34px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "mobileSize",
                    "defaultValue": "'25px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HelperService",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getInfo",
                    "args": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onWindowResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';\nimport { HelperService } from '../../services/helper.service';\n\n@Component({\n  selector: 'lib-header-text',\n  templateUrl: './header-text.component.html',\n  styleUrls: ['./header-text.component.scss']\n})\nexport class HeaderTextComponent implements OnInit {\n  @Input() label: string = 'label';\n  @Input() light: boolean = false;\n  @Input() thin: boolean = false;\n  @Input() info: string = '';\n  @Input() convertMobile: boolean = false;\n  @Input() size: string = '38px';\n  mobileSize: string = '25px';\n  mobileLineHeight: string = '34px';\n\n  @Output() public infoValue:EventEmitter<any> = new EventEmitter<string>();\n\n  constructor(\n    public screen: HelperService\n  ) {}\n\n  @HostListener('window:resize', ['$event'])\n    onWindowResize() {\n      this.screen.updateScreenSizes();\n  }\n\n  ngOnInit(): void {\n    this.mobileSize = this.screen.convertMobileFont(this.size, 0.658);\n    this.mobileLineHeight = this.screen.convertMobileFont(this.size, 0.9);\n  }\n\n  getInfo(e: string) {\n    this.infoValue.emit(e);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\";\n\n.da-header-text-wrapper {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    .da-header-text {\n        font-family: $font;\n        color: $t1-base-color;\n        text-align: center;\n        font-weight: 400;\n        margin: 0;\n    \n        &.light {\n            color: $t1-secondary-color;\n        }\n\n        &.thin {\n            font-weight: 300;\n        }\n    }\n\n    .da-header-info-button {\n        margin-left: 10px;\n    }\n}\n",
                    "styleUrl": "./header-text.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"da-header-text-wrapper\">\n    <h3 class=\"da-header-text\" \n        [ngClass]=\"{'light' : light, 'thin': thin}\" \n        [ngStyle]=\"screen.isSmallest() && convertMobile ? {'font-size': mobileSize, 'line-height': mobileLineHeight} : {'font-size': size}\"\n    >\n        {{label}}\n</h3>\n    <div class=\"da-header-info-button\" *ngIf=\"info\">\n        <lib-info-button \n            [light]=\"light\" \n            [id]=\"info\" \n            (infoPressed)=\"getInfo($event)\"\n        ></lib-info-button>\n    </div>\n</div>\n"
        },
        {
            "name": "InfoButtonComponent",
            "id": "component-InfoButtonComponent-9fd108bde3ff0b02e5d618c1332fd6d0c01ad98b3dce46af078c806038f40a9bbd95e7040f2cbeb749cb26ce23dd3da2c5c6485fc23ae3300d56b042a5605a72",
            "file": "projects/fm-library/src/lib/buttons/info-button/info-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-info-button",
            "styleUrls": [
                "./info-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./info-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "infoPressed",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "faCircleInfo",
                    "defaultValue": "faCircleInfo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "getInfo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\nimport { faCircleInfo } from '@fortawesome/free-solid-svg-icons';\n\n@Component({\n  selector: 'lib-info-button',\n  templateUrl: './info-button.component.html',\n  styleUrls: ['./info-button.component.scss']\n})\nexport class InfoButtonComponent implements OnInit {\n  @Input() light: boolean = false;\n  @Input() id: string = '';\n  @Output() public infoPressed:EventEmitter<any> = new EventEmitter<boolean>();\n  faCircleInfo = faCircleInfo;\n  \n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  getInfo() {\n    this.infoPressed.emit(this.id);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\"; \n\n.da-info-button {\n    color: $t1-base-color;\n    min-width: 20px;\n    min-height: 20px;\n    max-width: 20px;\n    max-height: 20px;\n    position: relative;\n    border-radius: 20px;\n    border: none;\n    background: transparent;\n    cursor: pointer;\n    transition: all 0.25s ease-in-out;\n\n    &.light {\n        color: $t4-secondary-color;\n        background: transparent;\n\n        .da-info-icon {\n            fill: $t4-secondary-color;\n            background-color: transparent;\n        }\n    }\n\n    .da-info-icon {\n        fill: $t1-base-color;\n        font-size: 20px;\n        width: 18px;\n        height: 18px;\n        top: 0;\n        left: 0;\n        position: absolute;\n        border-radius: 20px;\n        background-color: #fff;\n        box-shadow: 0 3px 5px $shadow-base-color;\n\n        svg {\n            position: relative;\n            top: -1px;\n            left: -1px;\n        }\n\n        &:hover {\n            font-size: 22px;\n            width: 20px;\n            height: 20px;\n            top: -1px;\n            left: -1px;\n        }\n    }\n}",
                    "styleUrl": "./info-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 13
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"da-info-button\" [ngClass]=\"{'light' : light}\" (click)=\"getInfo()\">\n    <svg-icon \n            class=\"da-info-icon\" \n            src=\"assets/images/circleInfo.svg\"\n        >\n        </svg-icon>\n    </div>\n"
        },
        {
            "name": "InputButtonComponent",
            "id": "component-InputButtonComponent-7bc1118a60d407198033ca59079e5e8d7894927642e79b4cbed87ba66a4ff666914792cf73783c7a7b7c2b49f171687316115fe80eec72e3affc9ce3e285df58",
            "file": "projects/fm-library/src/lib/inputs/input-button/input-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-input-button",
            "styleUrls": [
                "./input-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'assets/images/pen.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "info",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "infoHeader",
                    "defaultValue": "'info header'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "infoText",
                    "defaultValue": "'info text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "short",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "textAlign",
                    "defaultValue": "'right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'nebenkosten'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "unit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "infoValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "inputValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getInfo",
                    "args": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "textAlignIsCenter",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "textAlignIsLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'lib-input-button',\n  templateUrl: './input-button.component.html',\n  styleUrls: ['./input-button.component.scss']\n})\nexport class InputButtonComponent implements OnInit {\n\n  @Input() label: string = 'label';\n  @Input() name: string = 'name';\n  @Input() type: string = 'nebenkosten';\n  @Input() value!: string;\n  @Input() icon: string = 'assets/images/pen.svg';\n  @Input() touched: boolean = false;\n  @Input() short: boolean = false;\n  @Input() error: boolean = false;\n  @Input() unit!: string;\n  @Input() info: string = '';\n  @Input() inputDisabled: boolean = false;\n  @Input() autoWidth: boolean = false;\n  @Input() textAlign: string = 'right';\n  @Input() infoText: string = 'info text';\n  @Input() infoHeader: string = 'info header';\n  @Input() light: boolean = false;\n\n  @Output() public inputValue:EventEmitter<any> = new EventEmitter<string>();\n  @Output() public infoValue:EventEmitter<any> = new EventEmitter<string>();\n  \n  constructor() {}\n\n  ngOnInit(): void {\n    // if(this.unit && this.value) {\n    //   this.value = this.value + ' ' + this.unit;\n    // }\n  }\n\n  textAlignIsLeft() {\n    return this.textAlign === 'left' ? true : false;\n  }\n\n  textAlignIsCenter() {\n    return this.textAlign === 'center' ? true : false;\n  }\n\n  getValue() {\n    this.inputValue.emit(this.type);\n  }\n\n  getInfo(e: string) {\n    this.infoValue.emit(e);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\"; \n\n.da-input-button-single {\n    font-family: $font;\n\n    .da-input-button-label {\n        font-size: $t4-base-size;\n        margin-bottom: 3px;\n        margin-left: 21px;\n        text-align: left;\n        color: $t4-base-color;\n\n        &.light {\n            color: $t4-secondary-color;\n        }\n    }\n\n    .da-input {\n        position: relative;\n        display: flex;\n        align-items: center;\n\n        .da-input-button-icons {\n            height: 23px;\n            width: 23px;\n            font-size: 24px;\n            position: absolute;\n            left: 10px;\n            top: 9px;\n            z-index: 1;\n            border-radius: 25px;\n            box-shadow: 0 3px 5px $shadow-base-color;\n            background: #fff;\n\n            .da-input-button-icon-yellow {\n                color: $attention-color;\n                fill: $attention-color;\n            }\n\n            .da-input-button-icon-green {\n                color: $success-color;\n                fill: $success-color;\n            }\n\n            .da-input-button-icon-red {\n                color: $warning-base-color;\n                fill: $warning-base-color;\n            }\n\n        }\n\n        button {\n            width: 200px;\n            min-height: 43px;\n            border-radius: 24px;\n            background-color: #fff;\n            border: 0px solid transparent;\n            border-bottom: 1px solid $button-base-color;\n            box-shadow: 0 3px 5px $shadow-base-color;\n            text-align: right;\n            display: flex;\n            align-items: flex-start;\n            justify-content: flex-end;\n            padding: 8px;\n            font-size: $t1-base-size;\n            color: $t1-base-color;\n            font-family: $font;\n\n            &:hover,\n            &:focus,\n            &:focus-visible {\n                // border: 2px solid $button-base-color;\n                outline: none;\n            }\n\n            &.light {\n                box-shadow: 0 3px 5px $shadow-secondary-color;\n\n                &:hover,\n                &:focus {\n                    // border: 2px solid $button-secondary-color;\n                    outline: none;\n                }\n            }\n\n            &.withUnit {\n                // padding-right: 30px;\n            }\n\n            &.short {\n                width: 120px;\n            }\n\n            &.disabled {\n                cursor: default;\n                opacity: 0.5;\n                color: $t1-base-color; \n            }\n\n            &.text-align-left {\n                justify-content: flex-start;\n            }\n\n            &.text-align-center {\n                justify-content: center;\n            }\n\n            &.auto-width {\n                width: 100%;\n            }\n\n            .da-input-button-content {\n                display: flex;\n                width: 100%;\n                position: relative;\n                top: 2px;\n\n                .da-input-unit {\n                    position: relative;\n                    color: $t1-base-color;\n                    right: 6px;\n                    width: 25px;\n                    // display: flex;\n                    // justify-content: flex-end;\n                    pointer-events: none;\n        \n                    // .da-input-unit-wrapper {\n                    //     max-width: 25px;\n                    //     margin-right: 10px;\n                    //     overflow: hidden;\n                    // }\n        \n                    &.no-width {\n                        width: 0;\n                    }\n                }\n            }\n\n            .da-input-button-icon-click {\n                fill: $button-base-color;\n                font-size: 16px;\n                margin: 5px 5px 0 0;\n                position: absolute;\n                left: 55px;\n                transition: all 0.4s ease-in-out 0s, visibility 0s;\n                cursor: pointer;\n\n                &:hover {\n                    font-size: 20px;\n                    margin: 3px 5px 0 0;\n                }\n\n                &.no-unit {\n                    right: 5px;\n                }\n            }\n\n            .da-input-button-value {\n                width: 100%;\n                // margin: 3px 25px 0 35px;\n                display: block;\n            }\n        }\n\n        .da-input-button-info-button {\n            margin-left: 10px;\n        }\n    }\n}\n\n",
                    "styleUrl": "./input-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 28
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"da-input-button-single\">\n    <div class=\"da-input-button-label\" [ngClass]=\"{'light' : light}\">{{label}}</div>\n    <label class=\"da-input\">\n        <div class=\"da-input-button-icons\" *ngIf=\"touched && !error\">\n            <svg-icon \n                class=\"da-input-button-icon-green\" \n                src=\"assets/images/circleCheck.svg\" \n            ></svg-icon>\n        </div>\n        <div class=\"da-input-button-icons\" *ngIf=\"!touched && !error\">\n            <svg-icon \n                class=\"da-input-button-icon-yellow\" \n                src=\"assets/images/circleExclamation.svg\" \n            ></svg-icon>\n        </div>\n        <div class=\"da-input-button-icons\" *ngIf=\"error\">\n            <svg-icon \n                class=\"da-input-button-icon-red\" \n                src=\"assets/images/circleXmark.svg\" \n            ></svg-icon>\n        </div>\n        <button \n            autocomplete=\"off\"\n            [id]=\"name\"\n            (click)=\"getValue()\" \n            [name]=\"name\"\n            [disabled]=\"inputDisabled\"\n            [ngClass]=\"{\n                'light' : light,\n                'short' : short,\n                'withUnit': unit,\n                'auto-width' : autoWidth,\n                'text-align-left': textAlignIsLeft(),\n                'text-align-center': textAlignIsCenter(),\n                'disabled' : inputDisabled\n            }\"\n            #target>\n            <svg-icon \n                *ngIf=\"!inputDisabled\"\n                [ngClass]=\"{'no-unit' : !unit}\"\n                class=\"da-input-button-icon-click\" \n                [src]=\"icon\" \n            ></svg-icon>\n            <div class=\"da-input-button-content\">\n                <span class=\"da-input-button-value\" [innerHTML]=\"value\"></span>\n                <div class=\"da-input-unit\">\n                    <div class=\"da-input-unit-wrapper\">\n                        {{unit}}\n                    </div>\n                </div>\n            </div>\n        </button>\n        <div class=\"da-input-button-info-button\" *ngIf=\"info\">\n            <lib-info-button \n            [light]=\"light\" \n            (infoPressed)=\"getInfo($event)\"\n            [id]=\"info\"\n            ></lib-info-button>\n        </div>\n    </label>\n</div>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-f995dba70fc8a9687d799f55f4ade462a9cf49d1bf1a6fe020b78d247f6ba5d29810d5284d52dafcf7b8bce522981573e23d58db6b2f12d645c21f53dd987fb0",
            "file": "projects/fm-library/src/lib/inputs/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "backgroundColor",
                    "defaultValue": "'rgb(255, 255, 255)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "borderColor",
                    "defaultValue": "'rgb(32, 56, 100)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "boxShadowColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string | boolean",
                    "decorators": []
                },
                {
                    "name": "decimals",
                    "defaultValue": "2",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "disableNegativeMargin",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string | boolean",
                    "decorators": []
                },
                {
                    "name": "doneTypingInterval",
                    "defaultValue": "3000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "info",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "infoHeader",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "infoText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "isCurrency",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholderType",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string | boolean",
                    "decorators": []
                },
                {
                    "name": "skinnyLabel",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "textAlign",
                    "defaultValue": "'right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "textColor",
                    "defaultValue": "'rgb(32, 56, 100)'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "unit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "validationType",
                    "defaultValue": "'currency'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "infoValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "inputValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "defaultBoxShadowColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'target'"
                        }
                    ]
                },
                {
                    "name": "typingTimer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "doneTyping",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCurrency",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getCustomBorderColor",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getCustomBoxShadowColor",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getInfo",
                    "args": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "placeholderIsBlack",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "placeholderIsBlue",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "placeholderIsWhite",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removePlaceholder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "textAlignIsCenter",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "textAlignIsLeft",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewChild } from '@angular/core';\n\n@Component({\n  selector: 'lib-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.scss']\n})\nexport class InputComponent implements OnInit {\n  typingTimer: any;\n  @Input() doneTypingInterval: number = 3000;\n  @Input() form: any;\n  @Input() label: string = '';\n  @Input() name: string = '';\n  @Input() placeholder: string = '';\n  @Input() value: string = '';\n  @Input() touched: boolean = false;\n  @Input() type: string = 'text';\n  @Input() validationType: string = 'currency';\n  @Input() unit!: string;\n  @Input() info: string = '';\n  @Input() infoText: string = '';\n  @Input() infoHeader: string = '';\n  @Input() error: boolean = false;\n  @Input() errorText: string = '';\n  @Input() autoWidth: boolean = false;\n  @Input() isCurrency: boolean = true;\n  @Input() decimals: number = 2;\n  @Input() inputDisabled: boolean = false;\n  @Input() light: boolean = false;\n  @Input() skinnyLabel: boolean = false;\n  @Input() textAlign: string = 'right';\n  @Input() textColor: string = 'rgb(32, 56, 100)';\n  @Input() placeholderType: string | boolean = false;\n  @Input() backgroundColor: string = 'rgb(255, 255, 255)';\n  @Input() borderColor: string = 'rgb(32, 56, 100)';\n  defaultBoxShadowColor!: string;\n  @Input() boxShadowColor: string | boolean = false;\n  @Input() disableNegativeMargin: string | boolean = false;\n\n  @Output() public inputValue:EventEmitter<any> = new EventEmitter<string>();\n  @Output() public infoValue:EventEmitter<any> = new EventEmitter<string>();\n  @ViewChild('target') target!: any;\n  \n  constructor() {}\n\n  ngOnInit(): void {\n    this.light\n      ? this.defaultBoxShadowColor = '0 3px 5px rgba(255, 255, 255, 0.5)'\n      : this.defaultBoxShadowColor = '0 3px 5px rgba(32, 56, 100, 0.5)';\n  }\n\n  getValue(e: any) {\n    if (!!this.target.nativeElement.value) {\n      this.typingTimer = setTimeout(() => this.doneTyping(e), this.doneTypingInterval);\n    }\n  }\n\n  doneTyping(e: any) {\n    this.inputValue.emit([this.getCurrency(e.srcElement.value), this.name]);\n  }\n\n  getCurrency(e: any) {\n    if (this.isCurrency) {\n      const inputValue = e.replaceAll('.', '').replaceAll(',', '.');\n      if(isNaN(parseInt(inputValue))) {\n        return;\n      }\n      this.value = parseFloat(inputValue).toLocaleString('de-DE', { maximumFractionDigits: this.decimals, minimumFractionDigits: this.decimals });\n    } else {\n      this.value = e;\n    }\n    return this.value\n  }\n\n  removePlaceholder() {\n    this.placeholder = '';\n  }\n\n  getInfo(e: string) {\n    this.infoValue.emit(e);\n  }\n\n  textAlignIsLeft() {\n    return this.textAlign === 'left' ? true : false;\n  }\n\n  textAlignIsCenter() {\n    return this.textAlign === 'center' ? true : false;\n  }\n\n  placeholderIsWhite() {\n    return this.placeholderType === 'white' ? true : false;\n  }\n\n  placeholderIsBlack() {\n    return this.placeholderType === 'black' ? true : false;\n  }\n\n  placeholderIsBlue() {\n    return this.placeholderType === 'blue' ? true : false;\n  }\n\n  getCustomBorderColor() {\n    return '1px solid ' + this.borderColor;\n  }\n\n  getCustomBoxShadowColor() {\n    return '0 3px 5px ' + this.boxShadowColor;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\"; \n\n.da-input-single {\n    font-family: $font;\n\n    .da-input-label {\n        font-size: $t4-base-size;\n        margin-bottom: 3px;\n        text-align: left;\n        margin-left: 21px;\n        color: $t4-base-color;\n\n        &.light {\n            color: $t4-secondary-color;\n        }\n\n        &.skinny {\n            font-weight: 100;\n        }\n    }\n\n    .da-input {\n        position: relative;\n        display: flex;\n        align-items: center;\n        margin-right: -21px;\n        \n        &.no-negative-margin {\n            margin-right: 0;\n        }\n\n        .da-input-icons {\n            min-width: 23px;\n            min-height: 23px;\n            max-width: 23px;\n            max-height: 23px;\n            position: absolute;\n            left: 10px;\n            top: 9px;\n            border-radius: 23px;\n            border: none;\n            background: transparent;\n            z-index: 1;\n\n            .da-input-icon {\n\n                font-size: 25px;\n                width: 23px;\n                height: 23px;\n                top: 0;\n                left: 0;\n                position: absolute;\n                border-radius: 25px;\n                background-color: #fff;\n                box-shadow: 0 3px 5px $shadow-base-color;\n\n                &.green {\n                    fill: $success-color;\n                }\n\n                &.red {\n                    fill: $warning-base-color;\n                }\n\n                svg {\n                    position: absolute;\n                    top: -2px;\n                    left: -1px;\n                }\n            }\n    \n        }\n\n        input {\n            width: 135px;\n            height: 26px;\n            border-radius: 24px;\n            border: 0px solid transparent;\n            // border-bottom: 1px solid $button-base-color;\n            // box-shadow: 0 3px 5px $shadow-base-color;\n            text-align: right;\n            padding: 8px 20px 8px 45px;\n            font-size: $t1-base-size;\n            // color: $t1-base-color;\n            font-family: $font;\n\n            &:hover,\n            &:focus,\n            &:focus-visible {\n                // border: 2px solid $button-base-color;\n                outline: none;\n            }\n\n            &::placeholder {\n                color: $t5-base-color;\n                text-align: right;\n            }\n\n            &.white-placeholder {\n                &::placeholder {\n                    color: rgb(255, 255, 255);\n                }\n            }\n\n            &.black-placeholder {\n                &::placeholder {\n                    color: rgb(0, 0, 0);\n                }\n            }\n\n            &.blue-placeholder {\n                &::placeholder {\n                    color: $button-base-color;\n                }\n            }\n\n            &.withUnit {\n                padding-right: 30px;\n                width: 125px;\n\n                // &.auto-width {\n                //     padding-right: 30px;\n\n                //     .da-input-unit { \n                //         top: 0;\n                //     }\n                // }\n            }\n\n            &.auto-width {\n                width: 100%;\n\n            }\n\n            &.light {\n                // box-shadow: 0 3px 5px $shadow-secondary-color;\n\n                &:hover,\n                &:focus {\n                    // border: 2px solid $button-secondary-color;\n                    outline: none;\n                }\n            }\n\n            &.error {\n                background-color: $error-background;\n                border-bottom: 1px solid $warning-base-color;\n                color: $warning-base-color;\n\n                &::placeholder {\n                    color: $warning-base-color;\n                }\n            }\n\n            &.disabled {\n                background-color: $header-base-color;\n                color: $t1-base-color;\n                opacity: 0.5;\n            }\n\n            &.text-align-left {\n                text-align: left;\n                &::placeholder {\n                    text-align: left;\n                }\n            }\n\n            &.text-align-center {\n                text-align: center;\n                &::placeholder {\n                    text-align: center;\n                }\n            }\n        }\n\n        .da-input-unit {\n            position: relative;\n            color: $t1-base-color;\n            right: 25px;\n            width: 25px;\n            pointer-events: none;\n\n\n            .da-input-unit-wrapper {\n                display: flex;\n                align-items: center;\n                justify-content: flex-start;\n            }\n\n            &.no-width {\n                width: 0;\n            }\n        }\n\n        .da-input-info-button {\n            margin-left: -10px;\n        }\n\n    }\n    .da-input-error {\n            background-color: $button-base-color;\n            font-size: $t1-base-size;\n            color: $t1-secondary-color;\n            max-width: 185px;\n            position: absolute;\n            border-radius: 10px;\n            padding: 10px;\n            display: flex;\n            z-index: 2;\n            margin-top: 15px;\n            justify-content: center;\n            align-items: center;\n\n            &.light {\n                color: $t1-base-color;\n                background-color: $button-secondary-color;\n                box-shadow: 0 3px 5px $shadow-base-color;\n            }\n\n        .da-tooltip-arrow {\n            width: 20px;\n            height: 20px;\n            position: absolute;\n            top: -20px;\n            left: 20px;\n\n            .da-arrow-up {\n                width: 0; \n                height: 0; \n                border-left: 20px solid transparent;\n                border-right: 20px solid transparent;\n                border-bottom: 20px solid $button-base-color;\n\n                &.light {\n                    border-bottom: 20px solid $button-secondary-color;\n                }\n              }\n        }\n\n        .da-input-error-icon-wrapper {\n            background: transparent;\n            border-radius: 20px;\n            position: relative;\n            margin-right: 20px;\n            box-shadow: 0 3px 5px $shadow-base-color;\n            width: 20px;\n            height: 20px;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n\n            .da-input-error-icon {\n                fill: $t1-secondary-color;\n                font-size: 20px;\n                margin-top: 6px;\n            }\n\n            &.light {\n                background: #fff;\n\n                .da-input-error-icon {\n                    fill: $t1-base-color;\n                }\n            }\n        }\n    }\n}\n\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 42
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"da-input-single\">\n    <div class=\"da-input-label\" [ngClass]=\"{'light' : light, 'skinny': skinnyLabel}\">{{label}}</div>\n    <!-- Form Input -->\n    <label *ngIf=\"form\" class=\"da-input\" [ngClass]=\"{'no-negative-margin' : disableNegativeMargin}\" [formGroup]=\"form\">\n        <div class=\"da-input-icons\" *ngIf=\"touched\">\n            <svg-icon \n                *ngIf=\"!error\" \n                class=\"da-input-icon green\" \n                src=\"assets/images/circleCheck.svg\"\n            ></svg-icon>\n            <svg-icon \n                *ngIf=\"error\" \n                class=\"da-input-icon red\" \n                src=\"assets/images/circleXmark.svg\"\n            ></svg-icon>\n        </div>\n        <input \n            autocomplete=\"off\"\n            [type]=\"type\" \n            (keyup)=\"getValue($event)\" \n            (change)=\"doneTyping($event)\"\n            [placeholder]=\"placeholder\"\n            [formControlName]=\"name\"\n            [value]=\"value\"\n            [disabled]=\"inputDisabled\"\n            (click)=\"removePlaceholder()\"\n            [ngClass]=\"{'light' : light,\n                        'error' : error,\n                        'auto-width' : autoWidth,\n                        'withUnit': unit,\n                        'disabled': inputDisabled,\n                        'text-align-left': textAlignIsLeft(),\n                        'text-align-center': textAlignIsCenter(),\n                        'white-placeholder': placeholderIsWhite(),\n                        'black-placeholder': placeholderIsBlack(),\n                        'blue-placeholder': placeholderIsBlue()}\"\n            [ngStyle]=\"{'color': textColor,\n                        'background-color': backgroundColor,\n                        'border-bottom': '1px solid ' + borderColor,\n                        'box-shadow': boxShadowColor ? '0 3px 5px ' + boxShadowColor : defaultBoxShadowColor}\"\n            #target\n        >\n        <div class=\"da-input-unit\" [ngClass]=\"{'no-width' : disableNegativeMargin}\">\n            <div class=\"da-input-unit-wrapper\">\n                {{unit}}\n            </div>\n        </div>\n        <div class=\"da-input-info-button\" *ngIf=\"info\">\n            <lib-info-button \n            [light]=\"light\" \n            (infoPressed)=\"getInfo($event)\"\n            [id]=\"info\"\n            ></lib-info-button>\n        </div>\n    </label>\n    <!-- No Form Input -->\n    <label *ngIf=\"!form\" class=\"da-input\">\n        <div class=\"da-input-icons\" *ngIf=\"touched\">\n            <svg-icon \n                *ngIf=\"!error\" \n                class=\"da-input-icon green\" \n                src=\"assets/images/circleCheck.svg\"\n            ></svg-icon>\n            <svg-icon \n                *ngIf=\"error\" \n                class=\"da-input-icon red\" \n                src=\"assets/images/circleXmark.svg\"\n            ></svg-icon>\n        </div>\n        <input \n            autocomplete=\"off\"\n            [type]=\"type\" \n            (keyup)=\"getValue($event)\" \n            (change)=\"doneTyping($event)\"\n            [placeholder]=\"placeholder\"\n            [name]=\"name\"\n            [disabled]=\"inputDisabled\"\n            [value]=\"value\"\n            (click)=\"removePlaceholder()\"\n            [ngClass]=\"{'light' : light,\n                        'error' : error,\n                        'auto-width' : autoWidth,\n                        'withUnit': unit,\n                        'disabled': inputDisabled,\n                        'text-align-left': textAlignIsLeft(),\n                        'text-align-center': textAlignIsCenter(),\n                        'white-placeholder': placeholderIsWhite(),\n                        'black-placeholder': placeholderIsBlack(),\n                        'blue-placeholder': placeholderIsBlue()}\"\n            [ngStyle]=\"{'color': textColor,\n                        'background-color': backgroundColor,\n                        'border-bottom': getCustomBorderColor(),\n                        'box-shadow': boxShadowColor ? getCustomBoxShadowColor() : defaultBoxShadowColor}\"\n            #target\n        >\n        <div class=\"da-input-unit\">\n            <div class=\"da-input-unit-wrapper\">\n                {{unit}}\n            </div>\n        </div>\n        <div class=\"da-input-info-button\" *ngIf=\"info\">\n            <lib-info-button \n            [light]=\"light\" \n            (infoPressed)=\"getInfo($event)\"\n            [id]=\"info\"\n            ></lib-info-button>\n        </div>\n    </label>\n    <div class=\"da-input-error\" *ngIf=\"error\" [ngClass]=\"{'light' : light}\">\n        <div class=\"da-tooltip-arrow\">\n            <div class=\"da-arrow-up\" [ngClass]=\"{'light' : light}\"></div>\n        </div>\n        <div class=\"da-input-error-icon-wrapper\" [ngClass]=\"{'light' : light}\">\n            <svg-icon class=\"da-input-error-icon\" src=\"assets/images/circleExclamation.svg\"></svg-icon>\n        </div>\n        <span>{{errorText}}</span>\n    </div>\n</div>\n\n"
        },
        {
            "name": "InputDateComponent",
            "id": "component-InputDateComponent-aa6debd4ae612569878824d3f3f4fc99e9171ab992ef60382237eaa464014f0fcebd6af396a3cfd9f1de6678302bffe2d3e4e18e1ecd64d9a693c8c570e5d0a2",
            "file": "projects/fm-library/src/lib/inputs/input-date/input-date.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-input-date",
            "styleUrls": [
                "./input-date.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input-date.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "info",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "Date",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "dateInputValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "dateValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "infoValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "success",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "getInfo",
                    "args": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInput",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Inject, Input, OnInit, Output } from '@angular/core';\nimport { DateAdapter, MAT_DATE_LOCALE } from '@angular/material/core';\nimport 'moment/locale/de';\n\n@Component({\n  selector: 'lib-input-date',\n  templateUrl: './input-date.component.html',\n  styleUrls: ['./input-date.component.scss']\n})\n\nexport class InputDateComponent implements OnInit {\n  @Input() name!: string;\n  @Input() label!: string;\n  @Input() maxDate!: Date;\n  @Input() minDate!: Date;\n  @Input() value!: Date;\n  @Input() touched: boolean = false;\n  @Input() error: boolean = false;\n  @Input() errorText: string = '';\n  @Input() placeholder!: string;\n  @Input() light: boolean = false;\n  @Input() info: string = '';\n  @Output() public dateValue:EventEmitter<any> = new EventEmitter<string>();\n  @Output() public dateInputValue:EventEmitter<any> = new EventEmitter<string>();\n  @Output() public infoValue:EventEmitter<any> = new EventEmitter<string>();\n  success: boolean = false;\n\n  constructor(\n    private _adapter: DateAdapter<any>,\n    @Inject(MAT_DATE_LOCALE) private _locale: string,\n  ) {\n    this._locale = 'de';\n    this._adapter.setLocale(this._locale)\n  }\n\n  ngOnInit(): void {\n  }\n\n  getValue(e: any) {\n    this.value = e.value;\n    this.dateValue.emit(e.value);\n  }\n  getInput(e: any) {\n    this.dateInputValue.emit(e.value);\n  }\n\n  getInfo(e: string) {\n    this.infoValue.emit(e);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\"; \n\n.mat-form-field {\n    margin-top: -8px!important;\n    font-family: $font!important;\n    text-align: center!important;\n}\n\ninput.mat-input-element {\n    background-color: #fff!important;\n    border-radius: 24px!important;\n    height: 42px;\n    min-width: 185px!important;\n    width: 185px!important;\n    color: $button-base-color!important;\n    border: 0px solid transparent!important;\n    border-bottom: 1px solid $button-base-color!important;\n    box-shadow: 0 3px 5px $shadow-base-color!important;\n\n    &.light {\n        box-shadow: 0 3px 5px $shadow-secondary-color!important;\n    }\n\n    &.error {\n        background-color: $error-background!important;\n        border-bottom: 1px solid $warning-base-color!important;\n        color: $warning-base-color!important;\n\n        &::placeholder {\n            color: $warning-base-color!important;\n        }\n    }\n}\n\n.mat-datepicker-toggle {\n    position: absolute;\n    right: -4px;\n\n    button {\n        background-color: transparent!important;\n        color: $button-base-color!important;\n    }\n}\n\n.da-input-date-icons {\n    height: 23px;\n    width: 23px;\n    font-size: 24px;\n    position: absolute;\n    left: 10px;\n    top: 14px;\n    z-index: 2;\n    border-radius: 25px;\n    background: #fff;\n\n    .da-input-date-icon {\n\n        font-size: 25px;\n        width: 23px;\n        height: 23px;\n        top: 0;\n        left: 0;\n        position: absolute;\n        border-radius: 25px;\n        background-color: #fff;\n        box-shadow: 0 3px 5px $shadow-base-color;\n\n        &.green {\n            fill: $success-color;\n        }\n\n        &.red {\n            fill: $warning-base-color;\n        }\n\n        svg {\n            position: relative;\n            top: -1px;\n            left: -1px;\n        }\n    }\n}\n\n.da-input-date-single {\n    font-family: $font; \n\n    .da-input-date-label {\n        font-size: $t4-base-size;\n        margin-bottom: -4px;\n        margin-left: -55px;\n        color: $t4-base-color;\n    \n        &.light {\n            color: $t4-secondary-color;\n        }\n    }\n\n    .da-input-date {\n        display: flex;\n        align-items: start;\n        position: relative;\n\n        .da-input-info-button {\n            margin-top: 12px;\n        }\n    }\n    .da-input-date-error {\n        background-color: $button-base-color;\n        font-size: $t1-base-size;\n        color: $t1-secondary-color;\n        max-width: 185px;\n        position: absolute;\n        border-radius: 10px;\n        padding: 10px;\n        display: flex;\n        z-index: 1;\n        margin-top: -18px;\n        justify-content: center;\n        align-items: center;\n\n        &.light {\n            color: $t1-base-color;\n            background-color: $button-secondary-color;\n            box-shadow: 0 3px 5px $shadow-base-color;\n        }\n\n    .da-tooltip-arrow {\n        width: 20px;\n        height: 20px;\n        position: absolute;\n        top: -20px;\n        left: 20px;\n\n        .da-arrow-up {\n            width: 0; \n            height: 0; \n            border-left: 20px solid transparent;\n            border-right: 20px solid transparent;\n            border-bottom: 20px solid $button-base-color;\n\n            &.light {\n                border-bottom: 20px solid $button-secondary-color;\n            }\n          }\n    }\n\n    .da-input-date-error-icon-wrapper {\n        background: transparent;\n        border-radius: 20px;\n        position: relative;\n        margin-right: 20px;\n        box-shadow: 0 3px 5px $shadow-base-color;\n        width: 20px;\n        height: 20px;\n\n        .da-input-date-error-icon {\n            fill: $t1-secondary-color;\n            font-size: 20px;\n        }\n\n        &.light {\n            background: #fff;\n\n            .da-input-date-error-icon {\n                fill: $t1-base-color;\n            }\n        }\n    }\n}\n\n}\n\n\n",
                    "styleUrl": "./input-date.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_adapter",
                        "type": "DateAdapter<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "_locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "_adapter",
                        "type": "DateAdapter<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_locale",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"da-input-date-single\">\n    <div class=\"da-input-date-label\" [ngClass]=\"{'light' : light}\">{{label}}</div>\n    <label class=\"da-input-date\">\n      <div class=\"da-input-date-icons\" *ngIf=\"touched\">\n        <svg-icon \n            *ngIf=\"!error\" \n            class=\"da-input-date-icon green\" \n            src=\"assets/images/circleCheck.svg\"\n        ></svg-icon>\n        <svg-icon \n            *ngIf=\"error\" \n            class=\"da-input-date-icon red\" \n            src=\"assets/images/circleXmark.svg\"\n        ></svg-icon>\n    </div>\n      <mat-form-field appearance=\"fill\" color=\"accent\">\n        <!-- <mat-label>{{label}}</mat-label> -->\n        <input \n            matInput \n            [matDatepicker]=\"picker\" \n            [max]=\"maxDate\"\n            [min]=\"minDate\"\n            [value]=\"value\"\n            (dateChange)=\"getValue($event)\" \n            (dateInput)=\"getInput($event)\" \n            [placeholder]=\"placeholder\"\n            [ngClass]=\"{'light' : light, 'error' : error}\"\n        >\n        <mat-hint></mat-hint>\n        <mat-datepicker-toggle matIconSuffix [for]=\"picker\">\n            <svg-icon src=\"assets/images/circleCheck.svg\" class=\"da-input-date-success-icon\"></svg-icon>\n        </mat-datepicker-toggle>\n        <mat-datepicker #picker color=\"primary\"></mat-datepicker>\n      </mat-form-field>\n      <div class=\"da-input-info-button\" *ngIf=\"info\">\n          <lib-info-button \n            [light]=\"light\" \n            [id]=\"info\"\n            (infoPressed)=\"getInfo($event)\"\n          ></lib-info-button>\n      </div>\n    </label>\n    <div class=\"da-input-date-error\" *ngIf=\"error\" [ngClass]=\"{'light' : light}\">\n      <div class=\"da-tooltip-arrow\">\n          <div class=\"da-arrow-up\" [ngClass]=\"{'light' : light}\"></div>\n      </div>\n      <div class=\"da-input-date-error-icon-wrapper\" [ngClass]=\"{'light' : light}\">\n          <svg-icon class=\"da-input-date-error-icon\" src=\"assets/images/circleExclamation.svg\"></svg-icon>\n      </div>\n      <span>{{errorText}}</span>\n  </div>\n  </div>"
        },
        {
            "name": "ProgressButtonComponent",
            "id": "component-ProgressButtonComponent-8fc5cb772e0f469ad0f9ab1dc1a50e7ab9b1309476b61a44bbddf5d196c8fd6c065cc39e6b684cbfa24df2138eec397cc603325cef2e15ba28c4da5326044321",
            "file": "projects/fm-library/src/lib/buttons/progress-button/progress-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-progress-button",
            "styleUrls": [
                "./progress-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./progress-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "buttonValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HelperService",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "stateIcon",
                    "defaultValue": "'assets/images/lock.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "stateLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "getValue",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onWindowResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ]
                },
                {
                    "name": "setStateLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';\nimport { HelperService } from '../../services/helper.service';\n\n@Component({\n  selector: 'lib-progress-button',\n  templateUrl: './progress-button.component.html',\n  styleUrls: ['./progress-button.component.scss']\n})\n\nexport class ProgressButtonComponent implements OnInit{\n  @Input() type!: string;\n  @Input() label!: string;\n  @Input() icon!: string;\n  @Input() state!: string;\n  @Input() disabled: boolean = false;\n  @Output() public buttonValue:EventEmitter<any> = new EventEmitter<string>();\n  stateIcon: string = 'assets/images/lock.svg';\n  stateLabel!: string;\n\n  constructor(\n    public screen: HelperService\n  ) {}\n\n  @HostListener('window:resize', ['$event'])\n    onWindowResize() {\n      this.screen.updateScreenSizes();\n  }\n\n  ngOnInit() {\n    if (this.state) {\n      if(this.state === 'open') {\n        this.stateIcon = 'assets/images/lockOpen.svg';\n      }\n      this.setStateLabel();\n    }\n  }\n\n  getValue() {\n    this.buttonValue.emit(this.type);\n  }\n\n  setStateLabel() {\n    switch(this.state) {\n      case 'success': this.stateLabel = 'vollständig';\n      break;\n      case 'warning': this.stateLabel = 'unvollständig';\n      break;\n      case 'error': this.stateLabel = 'fehlerhaft';\n      break;\n      case 'open': this.stateLabel = 'freigeschaltet';\n      break;\n      case 'closed': this.stateLabel = 'noch nicht freigeschaltet';\n      break;\n      case 'info': this.stateLabel = 'Zwischenstand erreicht';\n      break;\n      case 'end': this.stateLabel = 'Angebot nicht möglich';\n      break;\n      default: this.stateLabel = 'optional';\n      break;\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\";\n\n.da-progress-button-single {\n    font-family: $font;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n\n    button {\n        border: none;\n        min-height: 22px;\n        min-width: 22px;\n        color: $button-base-color;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        font-size: 12px;\n        font-weight: 300;\n        font-family: $font;\n        transition: all 0.4s ease-in-out 0s, visibility 0s;\n        background: transparent;\n        cursor: pointer;\n\n        &.disabled {\n            cursor: default;\n            pointer-events: none;\n\n            .da-progress-button-icon {\n                opacity: 0.2;\n            }\n\n            .da-progress-button-state-circle {\n                display: none;\n            }\n        }\n\n        .da-progress-button-label {\n            width: 100%;\n            text-align: center;\n            display: block;\n            white-space: nowrap;\n            transition: all 0.4s ease-in-out 0s, visibility 0s;\n        }\n        .da-progress-button-state-wrapper {\n            position: relative;\n            width: 50px;\n\n            .da-progress-button-state {\n                position: absolute;\n                right: 8px;\n                bottom: 0;\n\n                .da-progress-button-state-icon {\n                    font-size: 12px;\n                    fill: $button-base-color;\n                }\n\n                .da-progress-button-state-circle {\n                    width: 14px;\n                    height: 14px;\n                    border-radius: 14px;\n                    margin-left: -10px;\n                    background-color: $tab-background;\n                    box-shadow: 0 3px 5px $shadow-base-color;\n                    transition: all 0.4s ease-in-out 0s, visibility 0s;\n\n                    &.green {\n                        background-color: $success-color;\n                    }\n                    &.yellow {\n                        background-color: $attention-color;\n                    }\n                    &.red {\n                        background-color: $warning-base-color;\n                    }\n                }\n            }\n            .da-progress-button-icon {\n                font-size: 21px;\n                display: inline-block;\n                width: 25px;\n                color: $button-base-color;\n                fill: $button-base-color;\n                transition: all 0.4s ease-in-out 0s, visibility 0s;\n\n                &.green {\n                    color: $success-color;\n                    fill: $success-color;\n                }\n\n                &.red {\n                    color: $warning-base-color;\n                    fill: $warning-base-color;\n                }\n            }\n        }\n        &:hover {\n            .da-progress-button-state-wrapper .da-progress-button-icon {\n                font-size: 24px;\n                width: 30px;\n            }\n\n            .da-progress-button-label {\n                font-size: 14px;\n            }\n\n            .da-progress-button-state-wrapper .da-progress-button-state .da-progress-button-state-circle {\n                width: 16px;\n                height: 16px;\n            }\n\n            +.da-progress-button-state-label {\n                visibility: visible;\n            }\n        }\n    }\n    .da-progress-button-state-label {\n        visibility: hidden;\n        color: $t1-secondary-color;\n        background-color: $button-base-color;\n        border-radius: 10px;\n        white-space: nowrap;\n        font-size: 12px;\n        font-weight: 300;\n        padding: 3px 10px;\n        text-align: center;\n        position: absolute;\n        bottom: -25px;\n        transition: all 0.4s ease-in-out 0s, visibility 0s;\n    }\n}\n",
                    "styleUrl": "./progress-button.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "\n<div class=\"da-progress-button-single\">\n    <button \n        (click)=\"getValue()\" \n        [ngClass]=\"{'disabled' : disabled}\" \n        [disabled]=\"disabled\"\n        #target\n    >\n    <div class=\"da-progress-button-state-wrapper\">\n        <svg-icon\n            class=\"da-progress-button-icon\" \n            [ngClass]=\"{'green' : state === 'info', 'red' : state === 'end'}\"\n            [src]=\"icon\"\n        >\n        </svg-icon>\n        <div class=\"da-progress-button-state\">\n            <svg-icon \n                *ngIf=\"state && (state === 'open' || state === 'closed'); else stateCircle\"\n                class=\"da-progress-button-state-icon\" \n                [src]=\"stateIcon\" \n            ></svg-icon>\n            <ng-template #stateCircle>\n                <div \n                    *ngIf=\"state && (state !== 'info' && state !== 'end')\"\n                    class=\"da-progress-button-state-circle\"\n                    [ngClass]=\"{'green' : state === 'success', 'yellow': state === 'warning', 'red' : state === 'error'}\"\n                ></div>\n            </ng-template>\n        </div>\n    </div>\n    <div class=\"da-progress-button-label\">\n        <span>\n            {{ label }}\n        </span>\n    </div> \n    </button>\n    <div *ngIf=\"stateLabel\" class=\"da-progress-button-state-label\">\n        <span>\n            {{ stateLabel }}\n        </span>\n    </div> \n</div>"
        },
        {
            "name": "StateIconComponent",
            "id": "component-StateIconComponent-4dc2ae40926f26035af4dc21ba7e44d10bd40e036c7bb5b70aebe996e4c0b839aefd61b1d30e33f42d217f8671f40802ec74d21ad9c4483294cb35c8badca9e5",
            "file": "projects/fm-library/src/lib/icons/state-icon/state-icon.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-state-icon",
            "styleUrls": [
                "./state-icon.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./state-icon.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "state",
                    "defaultValue": "'warning'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\n\n@Component({\n  selector: 'lib-state-icon',\n  templateUrl: './state-icon.component.html',\n  styleUrls: ['./state-icon.component.scss']\n})\nexport class StateIconComponent {\n  @Input() state: string = 'warning';\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\"; \n\n.da-state-icon-wrapper {\n    margin-left: 15px;\n    top: 15px;\n    position: absolute;\n    background: #fff;\n    font-size: 25px;\n    width: 23px;\n    height: 23px;\n    border-radius: 25px;\n    box-shadow: 0 3px 5px $shadow-base-color;\n\n    .da-state-icon {\n        position: absolute;\n        top: -1px;\n        left: -1px;\n\n        &.green {\n            color: $success-color;\n            fill: $success-color;\n        }\n\n        &.yellow {\n            color: $attention-color;\n            fill: $attention-color;\n        }\n\n        &.red {\n            color: $warning-base-color;\n            fill: $warning-base-color;\n        }\n        &.gray {\n            color: $header-base-color;\n            fill: $header-base-color;\n        }\n    }\n}\n",
                    "styleUrl": "./state-icon.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"da-state-icon-wrapper\">\n    <svg-icon class=\"da-state-icon green\" *ngIf=\"state === 'success'\" src=\"assets/images/circleCheck.svg\"></svg-icon>\n    <svg-icon class=\"da-state-icon yellow\" *ngIf=\"state === 'warning'\" src=\"assets/images/circleExclamation.svg\"></svg-icon>\n    <svg-icon class=\"da-state-icon red\" *ngIf=\"state === 'error'\" src=\"assets/images/circleXmark.svg\"></svg-icon>\n    <svg-icon class=\"da-state-icon gray\" *ngIf=\"state === 'optional'\" src=\"assets/images/circleFullQuestion.svg\"></svg-icon>\n</div>\n"
        },
        {
            "name": "TextAreaComponent",
            "id": "component-TextAreaComponent-49af73738f375cd51f735253446b9386f791718f35c2eb574685c0010e2d2ecf4181709ccdfaa2b19e186fa76ffba4f5ec20e0e5f00969f9eec422ba4f310bf8",
            "file": "projects/fm-library/src/lib/inputs/text-area/text-area.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-text-area",
            "styleUrls": [
                "./text-area.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-area.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "error",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "info",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "infoHeader",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "infoText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "multiLine",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "infoValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "inputValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getInfo",
                    "args": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "removePlaceholder",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'lib-text-area',\n  templateUrl: './text-area.component.html',\n  styleUrls: ['./text-area.component.scss']\n})\nexport class TextAreaComponent implements OnInit {\n  @Input() label: string = '';\n  @Input() name: string = '';\n  @Input() value: any = '';\n  @Input() touched: boolean = false;\n  @Input() placeholder: string = '';\n  @Input() multiLine: boolean = false;\n  @Input() info: string = '';\n  @Input() infoText: string = '';\n  @Input() infoHeader: string = '';\n  @Input() error: boolean = false;\n  @Input() autoWidth: boolean = false;\n  @Input() inputDisabled: boolean = false;\n  @Input() light: boolean = false;\n  @Output() public inputValue:EventEmitter<any> = new EventEmitter<string>();\n  @Output() public infoValue:EventEmitter<any> = new EventEmitter<string>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  getValue(e: any) {\n    this.inputValue.emit([e.srcElement.innerHTML, this.name]);\n  }\n\n  removePlaceholder() {\n    this.placeholder = '';\n  }\n\n  getInfo(e: string) {\n    this.infoValue.emit(e);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\"; \n\n.da-text-area-single {\n    font-family: $font;\n\n    .da-text-area-label {\n        font-size: $t4-base-size;\n        margin-bottom: 3px;\n        text-align: left;\n        margin-left: 21px;\n        color: $t4-base-color;\n\n        &.light {\n            color: $t4-secondary-color;\n        }\n    }\n\n    .da-text-area-wrapper {\n        position: relative;\n        display: flex;\n        align-items: center;\n        margin-right: -21px;\n\n        .da-text-area-icons {\n            min-width: 23px;\n            min-height: 23px;\n            max-width: 23px;\n            max-height: 23px;\n            position: absolute;\n            left: 10px;\n            top: 9px;\n            border-radius: 23px;\n            border: none;\n            background: transparent;\n\n            .da-text-area-icon {\n                font-size: 25px;\n                width: 23px;\n                height: 23px;\n                top: 0;\n                left: 0;\n                position: absolute;\n                border-radius: 25px;\n                background-color: #fff;\n                box-shadow: 0 3px 5px $shadow-base-color;\n\n                &.green {\n                    fill: $success-color;\n                }\n\n                &.red {\n                    fill: $warning-base-color;\n                }\n\n                svg {\n                    position: relative;\n                    top: -1px;\n                    left: -1px;\n                }\n            }\n    \n        }\n        \n        .da-text-area {\n            width: 140px;\n            height: 24px;\n            border-radius: 24px;\n            background-color: #fff;\n            border: 0px solid transparent;\n            border-bottom: 1px solid $button-base-color;\n            box-shadow: 0 3px 5px $shadow-base-color;\n            text-align: left;\n            padding: 10px 20px 8px 40px;\n            font-size: $t1-base-size;\n            color: $t1-base-color;\n            font-family: $font;\n            cursor: text;\n            overflow: hidden;\n\n            &:hover,\n            &:focus,\n            &:focus-visible {\n                outline: none;\n            }\n\n            &.auto-width {\n                width: 100%;\n            }\n\n            &.auto-height {\n                min-height: 26px;\n                height: auto;\n            }\n\n            &.light {\n                box-shadow: 0 3px 5px $shadow-secondary-color;\n\n                &:hover,\n                &:focus {\n                    outline: none;\n                }\n            }\n\n            &.disabled {\n                background-color: $header-base-color;\n                color: $t1-base-color-disabled;\n                cursor: default;\n            }\n            &.with-placeholder {\n                color: $t5-base-color;\n            }\n        }\n\n        .da-text-area-info-button {\n            margin-left: 10px;\n        }\n\n    }\n}\n\n",
                    "styleUrl": "./text-area.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 23
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"da-text-area-single\">\n    <div class=\"da-text-area-label\" [ngClass]=\"{'light' : light}\">{{label}}</div>\n    <label class=\"da-text-area-wrapper\">\n        <div class=\"da-text-area-icons\" *ngIf=\"touched\">\n            <svg-icon \n                *ngIf=\"!error\" \n                class=\"da-text-area-icon green\" \n                src=\"assets/images/circleCheck.svg\"\n            ></svg-icon>\n            <svg-icon \n                *ngIf=\"error\" \n                class=\"da-text-area-icon red\" \n                src=\"assets/images/circleXmark.svg\"\n            ></svg-icon>\n        </div>\n        <div  contenteditable\n            class=\"da-text-area\"\n            autocomplete=\"off\"\n            [innerHTML]=\"value ? value : placeholder\"\n            (keyup)=\"getValue($event)\"\n            (click)=\"removePlaceholder()\"\n            [ngClass]=\"{'light' : light, \n                        'auto-width' : autoWidth,\n                        'with-placeholder' : !value && placeholder, \n                        'auto-height' : multiLine, \n                        'disabled': inputDisabled}\"\n            #target\n        ></div>\n        <div class=\"da-text-area-info-button\" *ngIf=\"info\">\n            <lib-info-button \n            [light]=\"light\" \n            (infoPressed)=\"getInfo($event)\"\n            [id]=\"info\"\n            ></lib-info-button>\n        </div>\n    </label>\n</div>\n\n"
        },
        {
            "name": "TileCheckboxComponent",
            "id": "component-TileCheckboxComponent-86af04b48f6bbf90e485a3c0780f6e2ac854a202e116933bcc8cd23d91764055adfc7eca0208713ad5edc55718867d6dd4f1d187f75ce0353902d83f05304597",
            "file": "projects/fm-library/src/lib/tiles/tile-checkbox/tile-checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-tile-checkbox",
            "styleUrls": [
                "./tile-checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tile-checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "state",
                    "defaultValue": "'state'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "'value'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "checkboxValue",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HelperService",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "screenWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onWindowResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostListener, Input, Output, TemplateRef } from '@angular/core';\nimport { HelperService } from '../../services/helper.service';\n\n@Component({\n  selector: 'lib-tile-checkbox',\n  templateUrl: './tile-checkbox.component.html',\n  styleUrls: ['./tile-checkbox.component.scss']\n})\nexport class TileCheckboxComponent {\n  @Input() label: string = 'label';\n  @Input() name: string = 'name';\n  @Input() checked: boolean = false;\n  @Input() value: string = 'value';\n  @Input() state: string = 'state';\n  @Input() image?: string;\n  @Input() light: boolean = true;\n  @Input() content!: TemplateRef<any>;\n  expanded!: boolean;\n  screenWidth: any;\n  @Output() public checkboxValue:EventEmitter<any> = new EventEmitter<any>();\n\n  constructor(\n    public screen: HelperService\n  ) {}\n\n  @HostListener('window:resize', ['$event'])\n  onWindowResize() {\n    this.screen.updateScreenSizes();\n  }\n\n  getValue(e: any) {\n      this.checked = e.srcElement.checked;\n      const checked = e.srcElement.checked;\n      const name = e.srcElement.name;\n      const value = e.srcElement.value;\n      this.checkboxValue.emit({name, value, checked});\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\"; \n\n.da-tile-checkbox-single {\n    font-family: $font;\n\n    .da-tile-checkbox {\n        position: relative;\n        display: inline-block;\n        border-radius: 25px;\n        border: 1px solid transparent;\n        width: 242px;\n        min-height: 222px;\n        background-color: $radiobutton-base-color;\n        box-shadow: 0 3px 5px $shadow-base-color;\n        transition: all 0.25s ease-in-out;\n        padding-bottom: 14px;\n        cursor: pointer;\n\n        &:hover {\n            border: 1px solid $button-base-color;\n        }\n\n        &.expanded {\n            background-color: $button-base-color;\n            border: 1px solid $button-base-color;\n\n        }\n\n        &.mobile {\n            width: calc(100vw - 50px);\n            min-height: auto;\n            padding-bottom: 0;\n\n        }\n     \n        .da-tile-checkbox-icon-wrapper {\n                margin-left: 15px;\n                top: 15px;\n                position: absolute;\n                font-size: 25px;\n                background: #fff;\n                width: 23px;\n                height: 23px;\n                border-radius: 25px;\n                box-shadow: 0 3px 5px $shadow-base-color;\n                display: none;\n\n                &.checked {\n                    display: block;\n                }\n\n            .da-tile-checkbox-icon {\n                position: absolute;\n                top: -1px;\n                left: -1px;\n\n                &.green {\n                    color: $success-color;\n                    fill: $success-color;\n                }\n\n                &.yellow {\n                    color: $attention-color;\n                    fill: $attention-color;\n                }\n\n                &.red {\n                    color: $warning-base-color;\n                    fill: $warning-base-color;\n                }\n            }\n        }\n        .da-tile-checkbox-image {\n            width: 244px;\n            height: 90px;\n            color: $t4-base-color;\n            fill: $t4-base-color;\n            display: flex;\n            position: relative;\n            margin-bottom: 5px;\n            justify-content: center;\n            pointer-events: none;\n            font-size: 90px;\n\n            &.mobile {\n                width: 100%;\n                min-width: 244px;\n                font-size: 45px;\n                height: 45px;\n            }\n\n            &.checked {\n                color: $t4-secondary-color;\n                fill: $t4-secondary-color;\n            }\n        }\n    \n        input {\n            opacity: 0;\n            width: 0;\n            height: 0;\n    \n            &:checked ~ .da-tile-checkbox-icon-wrapper {\n                display: block;\n            }\n\n            &:checked ~ .da-tile-checkbox-image {\n                color: $t4-secondary-color;\n                fill: $t4-secondary-color;\n            }\n    \n            &:checked ~ .da-tile-checkbox-label {\n                color: $t4-secondary-color;\n                fill: $t4-secondary-color;\n            }\n        }\n\n        .da-tile-checkbox-label {\n            font-size: 20px;\n            color: $t4-base-color;\n            height: 100px;\n            display: flex;\n            position: relative;\n            align-items: center;\n            text-align: center;\n            justify-content: center;\n            width: 214px;\n            margin: 0 15px 15px;\n            overflow: hidden;\n            pointer-events: none;\n\n            &.mobile {\n                width: calc(100% - 30px);\n                height: auto;\n                font-size: 19px;\n            }\n\n            &.checked {\n                color: $t4-secondary-color;\n                fill: $t4-secondary-color;\n            }\n\n        }\n    }\n\n    .da-tile-checkbox-expanded {\n        display: flex;\n        align-items: center;\n        flex-direction: column;\n        transition: all 0.25s ease-in-out;\n\n        &.withContent {\n            padding-bottom: 14px;\n\n            &.mobile {\n                padding: 0 15px 35px 15px;\n            }\n        }\n    }\n}\n\n",
                    "styleUrl": "./tile-checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"da-tile-checkbox-single\">\n    <label \n            class=\"da-tile-checkbox\" \n            [ngClass]=\"{'expanded' : checked, 'mobile' : screen.isSmallest()}\"\n        >\n        <input \n            type=\"checkbox\" \n            (change)=\"getValue($event)\" \n            [checked]=\"checked\"\n            [name]=\"name\"\n            [value]=\"value\"\n        >\n        <div class=\"da-tile-checkbox-icon-wrapper\" [ngClass]=\"{'checked' : checked}\">\n            <svg-icon class=\"da-tile-checkbox-icon green\" *ngIf=\"state === 'success'\" src=\"assets/images/circleCheck.svg\"></svg-icon>\n            <svg-icon class=\"da-tile-checkbox-icon yellow\" *ngIf=\"state === 'warning'\" src=\"assets/images/circleExclamation.svg\"></svg-icon>\n            <svg-icon class=\"da-tile-checkbox-icon red\" *ngIf=\"state === 'error'\" src=\"assets/images/circleXmark.svg\"></svg-icon>\n        </div>\n        <svg-icon *ngIf=\"image\" \n            class=\"da-tile-checkbox-image\" \n            [ngClass]=\"{'mobile' : screen.isSmallest(), 'checked' : checked}\"\n            [src]=\"image\"\n        >\n        </svg-icon>\n        <div *ngIf=\"!image\"\n            class=\"da-tile-checkbox-image\" \n            [ngClass]=\"{'mobile' : screen.isSmallest()}\"\n        >\n        </div>\n        <div \n            class=\"da-tile-checkbox-label\"\n            [ngClass]=\"{'mobile' : screen.isSmallest(), 'checked' : checked}\"\n        >{{label}}</div>\n        <div *ngIf=\"checked\" class=\"da-tile-checkbox-expanded\" [ngClass]=\"{'light' : light, 'withContent': content, 'mobile' : screen.isSmallest()}\">\n            <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        </div>\n    </label>\n</div>"
        },
        {
            "name": "TileCheckboxGroupComponent",
            "id": "component-TileCheckboxGroupComponent-d8a68579c41ca5ec5c90cb6ff9d5f437a3d5ca42f212226921c6c5540b2eda3aa94b6eb473eb5c379d14cb4f2e151b44f6d3cc8d060a6e5f5d72c572c1a4904d",
            "file": "projects/fm-library/src/lib/tiles/tile-checkbox-group/tile-checkbox-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-tile-checkbox-group",
            "styleUrls": [
                "./tile-checkbox-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tile-checkbox-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "withIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "tileValue",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HelperService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "sendValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { HelperService } from '../../services/helper.service';\n\n@Component({\n  selector: 'lib-tile-checkbox-group',\n  templateUrl: './tile-checkbox-group.component.html',\n  styleUrls: ['./tile-checkbox-group.component.scss']\n})\nexport class TileCheckboxGroupComponent {\n  @Input() tiles: any;\n  @Input() withIndex!: boolean;\n  @Output() public tileValue:EventEmitter<any> = new EventEmitter<any>();\n  \n  constructor(\n    public screen: HelperService\n  ) { }\n\n  sendValue(e: any) {\n    this.tileValue.emit(e);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".da-tiles {\n    width: 100%;\n    display: flex;\n    column-gap: 24px;\n    row-gap: 24px;\n    flex-wrap: wrap;\n    justify-content: center;\n    max-width: 1366px;\n\n    &.withIndex {\n        width: 100vw;\n        max-width: 100%;\n        justify-content: flex-start;\n        flex-wrap: nowrap;\n\n        &.mobile {\n            column-gap: 34px;\n        }\n    }\n}",
                    "styleUrl": "./tile-checkbox-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"da-tiles\" [ngClass]=\"{'withIndex' : withIndex, 'mobile': screen.isSmallest()}\">\n    <ng-container *ngFor=\"let tile of tiles; let num = index\">\n        <lib-tile-checkbox\n            [label]=\"tile.label\"\n            [name]=\"tile.name\"\n            [checked]=\"tile.checked\"\n            [image]=\"tile.image\"\n            [state]=\"tile.state\"\n            [value]=\"tile.value\"\n            [content]=\"tile.content\"\n            (checkboxValue)=\"sendValue($event)\">\n        </lib-tile-checkbox>\n    </ng-container>\n</div>"
        },
        {
            "name": "TileComponent",
            "id": "component-TileComponent-01bae81a694ab31e34b449650cedaddd1edf9a8cac3b622c5da0f07469f0a3e90b317b133a883d46040181adcd11ee4c17f25bc0fc42a773f17ec9adfac1bd02",
            "file": "projects/fm-library/src/lib/tiles/tile/tile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-tile",
            "styleUrls": [
                "./tile.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tile.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "TemplateRef<any>",
                    "decorators": []
                },
                {
                    "name": "dark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "image",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "localValue",
                    "defaultValue": "'localValue'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "state",
                    "defaultValue": "'state'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "'value'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "checkboxValue",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HelperService",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onWindowResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostListener, Input, OnChanges, Output, SimpleChanges, TemplateRef } from '@angular/core';\nimport { HelperService } from '../../services/helper.service';\n\n@Component({\n  selector: 'lib-tile',\n  templateUrl: './tile.component.html',\n  styleUrls: ['./tile.component.scss']\n})\nexport class TileComponent implements OnChanges {\n  @Input() label: string = 'label';\n  @Input() name: string = 'name';\n  @Input() checked: boolean = false;\n  @Input() value: string = 'value';\n  @Input() localValue: string = 'localValue';\n  @Input() state: string = 'state';\n  @Input() image?: string;\n  @Input() light: boolean = true;\n  @Input() dark: boolean = false;\n  @Input() content!: TemplateRef<any>;\n  expanded!: boolean;\n\n  @Output() public checkboxValue: EventEmitter<any> = new EventEmitter<boolean>();\n\n  constructor(\n    public screen: HelperService\n  ) { }\n\n  @HostListener('window:resize', ['$event'])\n  onWindowResize() {\n    this.screen.updateScreenSizes();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes && changes['localValue']) {\n      this.expanded = this.localValue !== this.value ? false : true;\n    }\n  }\n\n  getValue(e: any) {\n    this.checkboxValue.emit(e.srcElement.value);\n  }\n\n}",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\"; \n\n.da-tile-single {\n    font-family: $font;\n\n    .da-tile {\n        position: relative;\n        display: inline-block;\n        border-radius: 25px;\n        border: 1px solid transparent;\n        width: 242px;\n        min-height: 222px;\n        background-color: $radiobutton-base-color;\n        box-shadow: 0 3px 5px $shadow-base-color;\n        transition: all 0.25s ease-in-out;\n        padding-bottom: 14px;\n        cursor: pointer;\n\n        &:hover {\n            border: 1px solid $button-base-color;\n        }\n\n        &.expanded {\n            background-color: $button-base-color;\n            border: 1px solid $button-base-color;\n\n            &.dark {\n                background-color: $radiobutton-secondary-color;\n            }\n\n        }\n\n        &.mobile {\n            width: calc(100vw - 50px);\n            min-height: auto;\n            padding-bottom: 0;\n\n        }\n\n        &.dark {\n            background-color: $tab-background;\n            box-shadow: 0px 8px 20px -5px $shadow-secondary-color;\n\n            .da-tile-image {\n                fill: $t4-secondary-color;\n                color: $t4-secondary-color;\n\n                &.checked {\n                    color: $t4-base-color;\n                    fill: $t4-base-color;\n                }\n            }\n\n            .da-tile-label {\n                color: $t4-secondary-color;\n            }\n        }\n     \n        .da-tile-icon-wrapper {\n                margin-left: 15px;\n                top: 15px;\n                position: absolute;\n                background: #fff;\n                font-size: 25px;\n                width: 23px;\n                height: 23px;\n                border-radius: 25px;\n                box-shadow: 0 3px 5px $shadow-base-color;\n                display: none;\n\n                &.checked {\n                    display: block;\n                }\n\n            .da-tile-icon {\n                position: absolute;\n                top: -1px;\n                left: -1px;\n\n                &.green {\n                    color: $success-color;\n                    fill: $success-color;\n                }\n\n                &.yellow {\n                    color: $attention-color;\n                    fill: $attention-color;\n                }\n\n                &.red {\n                    color: $warning-base-color;\n                    fill: $warning-base-color;\n                }\n            }\n        }\n        .da-tile-image {\n            width: 244px;\n            height: 90px;\n            color: $t4-base-color;\n            fill: $t4-base-color;\n            display: flex;\n            position: relative;\n            margin-bottom: 5px;\n            justify-content: center;\n            pointer-events: none;\n            font-size: 90px;\n\n            &.mobile {\n                width: 100%;\n                min-width: 244px;\n                font-size: 45px;\n                height: 45px;\n            }\n\n            &.checked {\n                color: $t4-secondary-color;\n                fill: $t4-secondary-color;\n            }\n        }\n    \n        input {\n            opacity: 0;\n            width: 0;\n            height: 0;\n    \n            &:checked ~ .da-tile-icon-wrapper {\n                display: block;\n            }\n\n            &:checked ~ .da-tile-image {\n                color: $t4-secondary-color;\n                fill: $t4-secondary-color;\n            }\n    \n            &:checked ~ .da-tile-label {\n                color: $t4-secondary-color;\n                fill: $t4-secondary-color;\n            }\n\n            &.dark {\n                &:checked ~ .da-tile-image {\n                    color: $t4-base-color;\n                    fill: $t4-base-color;\n                }\n        \n                &:checked ~ .da-tile-label {\n                    color: $t4-base-color;\n                    fill: $t4-base-color;\n                }\n            }\n        }\n\n        .da-tile-label {\n            font-size: 20px;\n            color: $t4-base-color;\n            height: 100px;\n            display: flex;\n            position: relative;\n            align-items: center;\n            text-align: center;\n            justify-content: center;\n            width: 214px;\n            margin: 0 15px 15px;\n            overflow: hidden;\n            pointer-events: none;\n\n            &.mobile {\n                width: calc(100% - 30px);\n                font-size: 19px;\n                height: auto;\n            }\n\n            &.checked {\n                color: $t4-secondary-color;\n                fill: $t4-secondary-color;\n            }\n\n        }\n    }\n\n    .da-tile-expanded {\n        display: flex;\n        align-items: center;\n        flex-direction: column;\n        transition: all 0.25s ease-in-out;\n\n        &.withContent {\n            padding-bottom: 14px;\n\n            &.mobile {\n                padding: 0 15px 35px 15px;\n            }\n        }\n    }\n}\n\n",
                    "styleUrl": "./tile.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"da-tile-single\">\n    <label \n            class=\"da-tile\" \n            [ngClass]=\"{'expanded' : expanded, 'dark' : dark, 'mobile' : screen.isSmallest()}\"\n        >\n        <input \n            type=\"radio\" \n            (change)=\"getValue($event)\" \n            [checked]=\"checked\"\n            [name]=\"name\"\n            [value]=\"value\"\n            [ngClass]=\"{'dark' : dark}\"\n        >\n        <div class=\"da-tile-icon-wrapper\" [ngClass]=\"{'checked' : checked}\">\n            <svg-icon class=\"da-tile-icon green\" *ngIf=\"state === 'success'\" src=\"assets/images/circleCheck.svg\"></svg-icon>\n            <svg-icon class=\"da-tile-icon yellow\" *ngIf=\"state === 'warning'\" src=\"assets/images/circleExclamation.svg\"></svg-icon>\n            <svg-icon class=\"da-tile-icon red\" *ngIf=\"state === 'error'\" src=\"assets/images/circleXmark.svg\"></svg-icon>\n        </div>\n        <svg-icon *ngIf=\"image\" \n            class=\"da-tile-image\" \n            [ngClass]=\"{'mobile' : screen.isSmallest(), 'checked' : checked}\"\n            [src]=\"image\"\n        >\n        </svg-icon>\n        <div *ngIf=\"!image\"\n            class=\"da-tile-image\" \n            [ngClass]=\"{'mobile' : screen.isSmallest()}\"\n        >\n        </div>\n        <div \n            class=\"da-tile-label\"\n            [ngClass]=\"{'mobile' : screen.isSmallest(), 'checked' : checked}\"\n        >{{label | translate}}</div>\n        <div *ngIf=\"expanded\" class=\"da-tile-expanded\" [ngClass]=\"{'light' : light, 'withContent': content, 'mobile' : screen.isSmallest()}\">\n            <ng-container *ngTemplateOutlet=\"content\"></ng-container>\n        </div>\n    </label>\n</div>"
        },
        {
            "name": "TileGroupComponent",
            "id": "component-TileGroupComponent-a16c4d0321c72f1e4fb682aee2594c8da19f3d2008a8cf31e02e74798e59d90681b59373e7a4e0f9d5abd04aa03bbe85aac6c3c5d18117b028a2fbced1168277",
            "file": "projects/fm-library/src/lib/tiles/tile-group/tile-group.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-tile-group",
            "styleUrls": [
                "./tile-group.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tile-group.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "localValue",
                    "defaultValue": "'localValue'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "withIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "tileValue",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HelperService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "sendValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { HelperService } from '../../services/helper.service';\n\n@Component({\n  selector: 'lib-tile-group',\n  templateUrl: './tile-group.component.html',\n  styleUrls: ['./tile-group.component.scss']\n})\nexport class TileGroupComponent {\n  @Input() tiles: any;\n  @Input() localValue: string = 'localValue';\n  @Input() withIndex!: boolean;\n  @Output() public tileValue:EventEmitter<any> = new EventEmitter<any>();\n  \n  constructor(\n    public screen: HelperService\n  ) { }\n\n  sendValue(e: any) {\n    this.localValue = e;\n    this.tileValue.emit(e);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".da-tiles {\n    width: 100%;\n    display: flex;\n    column-gap: 24px;\n    row-gap: 24px;\n    flex-wrap: wrap;\n    justify-content: center;\n    max-width: 1366px;\n\n    &.withIndex {\n        width: 100vw;\n        max-width: 100%;\n        justify-content: flex-start;\n        flex-wrap: nowrap;\n\n        &.mobile {\n            column-gap: 34px;\n        }\n    }\n}",
                    "styleUrl": "./tile-group.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div class=\"da-tiles\" [ngClass]=\"{'withIndex' : withIndex, 'mobile': screen.isSmallest()}\">\n    <ng-container *ngFor=\"let tile of tiles; let num = index\">\n        <lib-tile \n            [label]=\"tile.label\"\n            [name]=\"tile.name\"\n            [checked]=\"tile.checked\"\n            [image]=\"tile.image\"\n            [state]=\"tile.state\"\n            [value]=\"tile.value\"\n            [content]=\"tile.content\"\n            [dark]=\"tile.dark\"\n            [localValue]=\"localValue\"\n            (checkboxValue)=\"sendValue($event)\">\n        </lib-tile>\n    </ng-container>\n</div>\n"
        },
        {
            "name": "TileRatingComponent",
            "id": "component-TileRatingComponent-93e3eacf68053a5c74461f8f78d19f2a605417d412d105dff712a748153e173958cefd74f3005e4b419cf61fcc4792a2a5ed78ada34021ffd8a47ef466a1d088",
            "file": "projects/fm-library/src/lib/tiles/tile-rating/tile-rating.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-tile-rating",
            "styleUrls": [
                "./tile-rating.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tile-rating.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "info",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rating",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "stars",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "infoValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "ratingValue",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HelperService",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getInfo",
                    "args": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, TemplateRef } from '@angular/core';\nimport { HelperService } from '../../services/helper.service';\n\n@Component({\n  selector: 'lib-tile-rating',\n  templateUrl: './tile-rating.component.html',\n  styleUrls: ['./tile-rating.component.scss'],\n})\n\nexport class TileRatingComponent implements OnInit {\n  @Input() label: string = 'label';\n  @Input() name: string = 'name';\n  @Input() stars: number = 5;\n  @Input() info:  string = '';\n  @Input() rating: number = 0;\n  @Input() success!: boolean;\n  @Output() public ratingValue:EventEmitter<any> = new EventEmitter<any>();\n  @Output() public infoValue:EventEmitter<any> = new EventEmitter<string>();\n\n  constructor(\n    public screen: HelperService\n  ) {}\n\n  ngOnInit(): void {\n  }\n\n  getValue(e: any) {\n    const name = this.name;\n    const rating = e.rating;\n    this.success = true;\n    this.ratingValue.emit({rating, name});\n  }\n\n  getInfo(e: string) {\n    this.infoValue.emit(e);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\"; \n\n.da-tile-rating-single {\n    font-family: $font;\n\n    .da-tile-rating {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        align-items: center;\n        border-radius: 25px;\n        border: 1px solid transparent;\n        width: 242px;\n        min-height: 222px;\n        background-color: $radiobutton-base-color;\n        box-shadow: 0 3px 5px $shadow-base-color;\n        transition: all 0.25s ease-in-out;\n        padding-bottom: 14px;\n        cursor: pointer;\n\n        &:hover {\n            border: 1px solid $button-base-color;\n        }\n\n        &.expanded {\n            background-color: $button-base-color;\n            border: 1px solid $button-base-color;\n        }\n\n        &.mobile {\n            width: calc(100vw - 50px);\n            min-height: auto;\n            padding-bottom: 0;\n        }\n     \n        .da-tile-rating-icon-wrapper {\n                left: 15px;\n                top: 15px;\n                position: absolute;\n                font-size: 1.5rem;\n                background: #fff;\n                border-radius: 20px;\n                font-size: 25px;\n                width: 23px;\n                height: 23px;\n                border-radius: 25px;\n                box-shadow: 0 3px 5px $shadow-base-color;\n\n            .da-tile-rating-icon {\n                position: absolute;\n                top: -1px;\n                left: -1px;\n                color: $success-color;\n                fill: $success-color;\n\n                &.yellow {\n                    color: $attention-color;\n                    fill: $attention-color;\n                }\n\n            }\n        }\n        .da-tile-rating-stars {\n            height: 112px;\n            color: $t4-base-color;\n            fill: $t4-base-color;\n            display: flex;\n            position: relative;\n            justify-content: center;\n            align-items: flex-end;\n        }\n    \n        input {\n            opacity: 0;\n            width: 0;\n            height: 0;\n    \n            &:checked ~ .da-tile-rating-icon-wrapper {\n                display: block;\n            }\n\n            &:checked ~ .da-tile-rating-image {\n                color: $t4-secondary-color;\n            }\n    \n            &:checked ~ .da-tile-rating-label {\n                color: $t4-secondary-color;\n            }\n        }\n\n        .da-tile-rating-label {\n            font-size: 20px;\n            color: $t4-base-color;\n            height: 100px;\n            display: flex;\n            position: relative;\n            align-items: flex-start;\n            text-align: center;\n            justify-content: center;\n            width: 175px;\n            margin: 15px 15px 0 15px;\n            overflow: hidden;\n\n        }\n\n        .da-tile-rating-info-button {\n            margin-left: 10px;\n            margin-top: 5px;\n        }\n    }\n\n    .da-tile-rating-expanded {\n        display: flex;\n        align-items: center;\n        flex-direction: column;\n        transition: all 0.25s ease-in-out;\n    }\n}\n\n\n\n",
                    "styleUrl": "./tile-rating.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"da-tile-rating-single\">\n    <div class=\"da-tile-rating\" [ngClass]=\"{'mobile' : screen.isSmallest()}\">\n        <div class=\"da-tile-rating-icon-wrapper\" >\n            <svg-icon *ngIf=\"!success\" class=\"da-tile-rating-icon yellow\" src=\"assets/images/circleExclamation.svg\"></svg-icon>\n            <svg-icon *ngIf=\"success\" class=\"da-tile-rating-icon\" src=\"assets/images/circleCheck.svg\"></svg-icon>\n        </div>\n        <div class=\"da-tile-rating-stars\">\n            <star-rating \n            [starType]=\"'svg'\"\n            size=\"large\"\n            [numOfStars]=\"stars\" \n            [rating]=\"rating\"\n            [hoverEnabled]=\"true\"\n            (starClickChange)=\"getValue($event)\"\n            ></star-rating>\n        </div>\n\n        <div class=\"da-tile-rating-label\">{{label}}\n            <div class=\"da-tile-rating-info-button\" *ngIf=\"info\">\n                <lib-info-button \n                    [light]=\"false\" \n                    [id]=\"info\"\n                    (infoPressed)=\"getInfo($event)\"\n                ></lib-info-button>\n            </div>\n        </div>\n    </div>\n</div>\n"
        },
        {
            "name": "TileTextComponent",
            "id": "component-TileTextComponent-1c82844e27e0001ceb0079f3ec280e5b76dd54b393a8282b5d7b47ea4ee17453634b302e88e0f68f5d3023de2af6de806302f4bf9b523934efb9f2f6c1162199",
            "file": "projects/fm-library/src/lib/text/tile-text/tile-text.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-tile-text",
            "styleUrls": [
                "./tile-text.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tile-text.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "convertMobile",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "info",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'16px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "thin",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "infoValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "mobileSize",
                    "defaultValue": "'14px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "screen",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HelperService",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getInfo",
                    "args": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onWindowResize",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'window:resize', ['$event']"
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "window:resize",
                    "args": [],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, HostListener, Input, OnInit, Output } from '@angular/core';\nimport { HelperService } from '../../services/helper.service';\n\n@Component({\n  selector: 'lib-tile-text',\n  templateUrl: './tile-text.component.html',\n  styleUrls: ['./tile-text.component.scss']\n})\nexport class TileTextComponent implements OnInit {\n  @Input() label: string = 'label';\n  @Input() light: boolean = false;\n  @Input() thin: boolean = false;\n  @Input() info: string = '';\n  @Input() convertMobile: boolean = false;\n  @Input() size: string = '16px';\n  mobileSize: string = '14px';\n\n  @Output() public infoValue:EventEmitter<any> = new EventEmitter<string>();\n\n  constructor(\n    public screen: HelperService\n  ) { }\n\n  @HostListener('window:resize', ['$event'])\n  onWindowResize() {\n    this.screen.updateScreenSizes();\n  }\n\n  ngOnInit(): void {\n    this.mobileSize = this.screen.convertMobileFont(this.size, 0.875);\n  }\n\n  getInfo(e: string) {\n    this.infoValue.emit(e);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\";\n\n.da-tile-text-wrapper {\n    display: flex;\n    align-items: center;\n\n    .da-tile-text {\n        font-family: $font;\n        font-weight: 400;\n        color: $t1-base-color;\n    \n        &.light {\n            color: $t1-secondary-color;\n        }\n\n        &.thin {\n            font-weight: 300;\n        }\n    }\n\n    .da-text-info-button {\n        margin-left: 10px;\n    }\n}\n\n",
                    "styleUrl": "./tile-text.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "screen",
                        "type": "HelperService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"da-tile-text-wrapper\">\n    <p class=\"da-tile-text\" \n        [ngClass]=\"{'light' : light, 'thin': thin}\"  \n        [ngStyle]=\"screen.isSmallest() && convertMobile ? {'font-size': mobileSize} : {'font-size': size}\"\n    >\n        {{label}}\n    </p>\n    <div class=\"da-text-info-button\" *ngIf=\"info\">\n        <lib-info-button \n            [light]=\"light\" \n            [id]=\"info\" \n            (infoPressed)=\"getInfo($event)\"\n        ></lib-info-button>\n    </div>\n</div>"
        },
        {
            "name": "ToggleCheckboxComponent",
            "id": "component-ToggleCheckboxComponent-3d6ee4a550ab3f68e64f3f9929cf03abc50125ddb5d69d124902fb48651751704dcc947223b78be5d5008acc6f936aaf25eb7bd1195589a5af8fff995c07d44c",
            "file": "projects/fm-library/src/lib/toggle/toggle-checkbox/toggle-checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-toggle-checkbox",
            "styleUrls": [
                "./toggle-checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle-checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dynLabelClassName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "checkboxValue",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getLabelClassNames",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'lib-toggle-checkbox',\n  templateUrl: './toggle-checkbox.component.html',\n  styleUrls: ['./toggle-checkbox.component.scss']\n})\nexport class ToggleCheckboxComponent implements OnInit {\n  @Input() form: any;\n  @Input() label: string = 'label';\n  @Input() dynLabelClassName?: string;\n  @Input() name: string = 'name'; \n  @Input() checked: boolean = false;\n  @Input() light: boolean = false;\n  @Output() public checkboxValue:EventEmitter<any> = new EventEmitter<boolean>();\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  getValue(e: any) {\n    this.checkboxValue.emit(e.srcElement.checked);\n  }\n\n  getLabelClassNames() {\n    let label = 'da-switch-label';\n    if (this.light) {\n      label = label + ' light';\n    }\n    if (this.dynLabelClassName) {\n      label = label + ' ' + this.dynLabelClassName;\n    }\n    return label;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\";\n\n.da-toggle-checkbox {\n    font-family: $font;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n\n    .da-switch {\n        position: relative;\n        display: inline-block;\n        background-color: #fff;\n        box-shadow: 0 3px 5px $shadow-base-color;\n        border-radius: 25px;\n        width: 50px;\n        min-width: 50px;\n        height: 25px;\n\n        &.light {\n            box-shadow: 0 3px 5px $shadow-secondary-color;\n        }\n    \n        input {\n            opacity: 0;\n            width: 0;\n            height: 0;\n    \n            &:checked + .da-switch-slider {\n                background-color: $success-color;\n                width: 34px;\n            }\n    \n            &:checked + .da-switch-slider {\n                -webkit-transform: translateX(-25px);\n                -ms-transform: translateX(-25px);\n                transform: translateX(-25px);\n            }\n\n            &:checked + .da-switch-slider >  .da-switch-icon{\n                color: $success-color;\n                fill: $success-color;\n            }\n        }\n    \n        .da-switch-slider {\n            position: absolute;\n            cursor: pointer;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            color: #fff;\n            left: 25px;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            height: 25px;\n            width: 25px;\n            border-radius: 25px;\n            background-color: #ccc;\n            -webkit-transition: 0.4s;\n            transition: 0.4s;\n\n            .da-switch-icon {\n                fill: #fff;\n                color: #fff;\n                margin-top: 6px;\n                -webkit-transition: 0.4s;\n                transition: 0.4s;\n            }\n        }\n    }\n    .da-switch-label {\n        font-size: 14px;\n        color: $t4-base-color;\n        position: relative;\n        white-space: nowrap;\n        left: 10px;\n\n        &.light {\n            color: $t4-secondary-color;\n        }\n\n        &.wrap {\n            white-space: normal !important;\n        }\n\n        a, a:link, a:visited, a:hover, a:active { // Scheint nicht zu funktionieren\n            color: inherit !important;\n        }\n    }\n}",
                    "styleUrl": "./toggle-checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"da-toggle-checkbox\">\n    <!-- Form Input -->\n    <label *ngIf=\"form\" class=\"da-switch\" [ngClass]=\"{'light' : light}\" [formGroup]=\"form\">\n        <input \n            type=\"checkbox\" \n            (change)=\"getValue($event)\" \n            [checked]=\"checked\"\n            [formControlName]=\"name\"\n        >\n        <span class=\"da-switch-slider\">\n            <svg-icon class=\"da-switch-icon\" src=\"assets/images/xmark.svg\"></svg-icon>\n        </span>\n    </label>\n    <!-- No Form Input -->\n    <label *ngIf=\"!form\" class=\"da-switch\" [ngClass]=\"{'light' : light}\">\n        <input \n            type=\"checkbox\" \n            (change)=\"getValue($event)\" \n            [checked]=\"checked\"\n            [name]=\"name\"\n        >\n        <span class=\"da-switch-slider\">\n            <svg-icon class=\"da-switch-icon\" src=\"assets/images/xmark.svg\"></svg-icon>\n        </span>\n    </label>\n    <span [ngClass]=\"getLabelClassNames()\">{{label}}<a href=\"#\">Test 1 2 3</a></span>\n</div>\n\n"
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-12aa76a23c58e8399922723b2a76464cbfff52f69e9023f7564e48121d7b7150937e6289efa35fc6fe3b8a426b83cd24471b89036b47a98518de4f70296bf39a",
            "file": "projects/fm-library/src/lib/toggle/toggle/toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-toggle",
            "styleUrls": [
                "./toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "inputDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label1",
                    "defaultValue": "'label1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label2",
                    "defaultValue": "'label2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "localValue",
                    "defaultValue": "'localValue'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value1",
                    "defaultValue": "'value1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value2",
                    "defaultValue": "'value2'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "switchValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getCheckedOption",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\n@Component({\n  selector: 'lib-toggle',\n  templateUrl: './toggle.component.html',\n  styleUrls: ['./toggle.component.scss']\n})\nexport class ToggleComponent implements OnChanges{\n  @Input() name: string = 'name';\n  @Input() label1: string = 'label1';\n  @Input() value1: string = 'value1';\n  @Input() label2: string = 'label2';\n  @Input() value2: string = 'value2';\n  @Input() inputDisabled: boolean = false;\n  @Input() localValue: string = 'localValue';\n  @Input() light: boolean = false;\n\n  @Output() public switchValue:EventEmitter<any> = new EventEmitter<string>();\n  \n  constructor() { }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if(changes['localValue']) {\n      this.localValue = changes['localValue'].currentValue;\n    }\n  }\n\n  getCheckedOption(value: string) {\n    return this.localValue == value;\n  }\n\n  getValue(e: any) {\n    this.localValue = e.srcElement.value;\n    this.switchValue.emit(e.srcElement.value);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\";  \n\n.da-toggle {\n    font-family: $font;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 200px;\n    height: 42px;\n    border-radius: 21px;\n    background-color: #fff;\n    box-shadow: 0 3px 5px $shadow-base-color;\n\n    &.light {\n        box-shadow: 0 3px 5px $shadow-secondary-color;\n    }\n\n    .da-switch {\n        position: relative;\n        cursor: pointer;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        border-radius: 21px;\n        width: 92px;\n        height: 42px;\n        -webkit-transition: 0.4s;\n        transition: 0.4s;\n\n        &.disabled {\n            cursor: default;\n        }\n\n        input {\n            opacity: 0;\n            width: 0;\n            height: 0;\n\n            &:checked + .da-switch-slider {\n                background-color: $success-color;\n                color: #fff;\n                fill: #fff;\n                box-shadow: 0 3px 5px $shadow-base-color;\n                z-index: 2;\n            }\n\n            &:checked + .da-switch-slider.light {\n                background-color: $success-color;\n                color: #fff;\n                fill: #fff;\n                box-shadow: 0 3px 5px $shadow-secondary-color;\n                z-index: 2;\n            }\n\n            &:checked + .da-switch-slider.disabled {\n                background-color: $header-base-color;\n                color: $t1-base-color;\n                fill: $t1-base-color;\n            }\n\n        }\n\n        .da-switch-label {\n            position: relative;\n            white-space: nowrap;\n            pointer-events: none;\n            left: 10px;\n            z-index: 1;\n        }\n        .da-switch-icon {\n            font-size: 1.5rem;\n            z-index: 1;\n            color: #fff;\n            fill: #fff;\n            margin-right: -5px;\n            margin-top: 5px;\n            pointer-events: none;\n        }\n\n        .da-switch-slider {\n            position: absolute;\n            cursor: pointer;\n            top: 0;\n            bottom: 0;\n            height: 42px;\n            width: 100%;\n            color: $t1-base-color;\n            fill: $t1-base-color;\n            border-radius: 21px;\n            z-index: 1;\n            display: flex;\n            align-items: center;\n            justify-content: space-around;\n            -webkit-transition: 0.4s;\n            transition: 0.4s;\n\n            &.disabled {\n                cursor: auto;\n                pointer-events: none;\n            }\n\n            &.right {\n                right: -1px;\n                left: 0px;\n                width: 100px;\n            }\n\n            &.left {\n                left: -8px;\n                right: 0px;\n                width: 100px;\n            }\n\n            &:before {\n                position: absolute;\n                content: \"\";\n                height: 42px;\n                width: 100%;\n                border-radius: 21px;\n                -webkit-transition: 0.4s;\n                transition: 0.4s;\n            }\n\n            &.left:hover {\n                background-color: #ccc;\n                box-shadow: 0 3px 5px $shadow-base-color;\n                color: #fff;\n                fill: #fff;\n\n\n            }\n\n            &.right:hover {\n                background-color: #ccc;\n                box-shadow: 0 3px 5px $shadow-base-color;\n                color: #fff;\n                fill: #fff;\n            }\n        }\n\n\n    }\n}\n\n",
                    "styleUrl": "./toggle.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 17
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"da-toggle\" [ngClass]=\"{'light' : light}\">\n    <label class=\"da-switch left\" [ngClass]=\"{'disabled': inputDisabled}\">\n        <input \n            type=\"radio\" \n            (change)=\"getValue($event)\" \n            [name]=\"name\" \n            [disabled]=\"inputDisabled\"\n            [value]=\"value1\"\n            [checked]=\"getCheckedOption(value1)\"\n        >\n        <div class=\"da-switch-slider left\" [ngClass]=\"{'light' : light, 'disabled': inputDisabled}\">\n            <span class=\"da-switch-label\">{{label1}}</span>\n            <svg-icon *ngIf=\"!inputDisabled\" class=\"da-switch-icon\" src=\"assets/images/circleCheck.svg\"></svg-icon>\n        </div>\n    </label>\n    <label class=\"da-switch right\" [ngClass]=\"{'disabled': inputDisabled}\">\n        <input \n            type=\"radio\" \n            (change)=\"getValue($event)\" \n            [name]=\"name\" \n            [disabled]=\"inputDisabled\"\n            [value]=\"value2\"\n            [checked]=\"getCheckedOption(value2)\"\n        >\n        <div class=\"da-switch-slider right\" [ngClass]=\"{'light' : light, 'disabled': inputDisabled}\">\n            <span class=\"da-switch-label\">{{label2}}</span>\n            <svg-icon *ngIf=\"!inputDisabled\" class=\"da-switch-icon\" src=\"assets/images/circleCheck.svg\"></svg-icon>\n        </div>\n\n    </label>\n</div>\n\n"
        },
        {
            "name": "ToggleHorizontalComponent",
            "id": "component-ToggleHorizontalComponent-c8378320c6b4db4ec16307408c0f7738c06db0e2673981f8655dad014eb5058c65b98247bd42b780f7da7ef66f6589d04123d835dcab1ea46f4f0875ec4ca309",
            "file": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-toggle-horizontal",
            "styleUrls": [
                "./toggle-horizontal.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle-horizontal.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "elementWidth",
                    "defaultValue": "'auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "localValue",
                    "defaultValue": "'localValue'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "toggleWidth",
                    "defaultValue": "'auto'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "switchValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "toggleContainer",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'toggleContainer'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getCheckedOption",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getElementAmount",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getElementWidthWithToggleWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getToggleWidthWithElementWidth",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuto",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleWidthAuto",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';\n\n@Component({\n  selector: 'lib-toggle-horizontal',\n  templateUrl: './toggle-horizontal.component.html',\n  styleUrls: ['./toggle-horizontal.component.scss']\n})\nexport class ToggleHorizontalComponent implements AfterViewInit {\n\n  @Input() name: string = 'name';\n  @Input() label?: string;\n  @Input() options: any;\n  @Input() light: boolean = false;\n  @Input() localValue: string = 'localValue';\n  @Input() toggleWidth: string = 'auto';\n  @Input() elementWidth: string = 'auto';\n\n  @Output() public switchValue:EventEmitter<any> = new EventEmitter<string>();\n  \n  @ViewChild('toggleContainer') toggleContainer!: ElementRef<any>;\n\n  constructor(private cdr: ChangeDetectorRef) {}\n\n  ngAfterViewInit(): void {\n    if (this.toggleWidthAuto()) {\n      this.toggleWidth = this.toggleContainer.nativeElement.offsetWidth + 'px';\n      this.elementWidth = (+this.toggleContainer.nativeElement.offsetWidth / this.getElementAmount()).toString() + 'px';\n      this.cdr.detectChanges();\n    } else if (this.isAuto(this.toggleWidth)) {\n      this.toggleWidth = this.getToggleWidthWithElementWidth();\n      this.cdr.detectChanges();\n    } else if (this.isAuto(this.elementWidth)) {\n      this.elementWidth = this.getElementWidthWithToggleWidth();\n      this.cdr.detectChanges();\n    }\n  }\n\n  getCheckedOption(value: string) {\n    return this.localValue === value;\n  }\n\n  sendValue(e: any) {\n    this.localValue = e;\n    this.switchValue.emit(e.srcElement.value);\n  }\n\n  toggleWidthAuto() {\n    return this.isAuto(this.toggleWidth) && this.isAuto(this.elementWidth) ? true : false;\n  }\n\n  isAuto(value: string) {\n    return value === 'auto' ? true : false;\n  }\n\n  getElementAmount() {\n    return this.options.length;\n  }\n\n  getElementWidthWithToggleWidth() {\n    let widthNumber = this.toggleWidth.replace(/[^0-9]/g, '');\n    let widthType = this.toggleWidth.replace(widthNumber, '');\n    return (+widthNumber / this.getElementAmount()).toString() + widthType;\n  }\n\n  getToggleWidthWithElementWidth() {\n    let widthNumber = this.elementWidth.replace(/[^0-9]/g, '');\n    let widthType = this.elementWidth.replace(widthNumber, '');\n    return (+widthNumber * this.getElementAmount()).toString() + widthType;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\";  \n\n.toggle-container {\n    width: 100%;\n}\n\n.da-toggle-horizontal-wrapper {\n    font-family: $font;\n\n    .da-toggle-horizontal-label {\n        font-size: $t4-base-size;\n        margin-bottom: 3px;\n        text-align: left;\n        margin-left: 21px;\n        color: $t4-base-color;\n\n        &.light {\n            color: $t4-secondary-color;\n        }\n    }\n\n    .da-toggle-horizontal {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        // width: 300px;\n        width: auto;\n        overflow: hidden;\n        flex-direction: row;\n        border-radius: 21px;\n        background-color: #fff;\n        box-shadow: 0 3px 5px $shadow-base-color;\n    \n        &.light {\n            box-shadow: 0 3px 5px $shadow-secondary-color;\n        }\n    \n        .da-switch {\n            position: relative;\n            cursor: pointer;\n            top: 0;\n            left: 0;\n            right: 0;\n            bottom: 0;\n            border-radius: 21px;\n            // width: 110px;\n            height: 42px;\n            -webkit-transition: 0.4s;\n            transition: 0.4s;\n    \n    \n            input {\n                opacity: 0;\n                width: 0;\n                height: 0;\n    \n                &:checked + .da-switch-slider {\n                    background-color: $success-color;\n                    color: #fff;\n                    fill: #fff;\n                    box-shadow: 0 3px 5px $shadow-base-color;\n                    z-index: 2;\n                }\n    \n                &:checked + .da-switch-slider.light {\n                    background-color: $success-color;\n                    color: #fff;\n                    fill: #fff;\n                    box-shadow: 0 3px 5px $shadow-secondary-color;\n                    z-index: 2;\n                }\n    \n            }\n    \n            .da-switch-label {\n                position: relative;\n                white-space: nowrap;\n                pointer-events: none;\n                left: 20px;\n                z-index: 1;\n            }\n            .da-switch-icon {\n                font-size: 1.5rem;\n                z-index: 1;\n                color: #fff;\n                fill: #fff;\n                margin-right: 10px;\n                margin-top: 8px;\n                pointer-events: none;\n            }\n    \n            .da-switch-slider {\n                position: absolute;\n                cursor: pointer;\n                top: 0;\n                bottom: 0;\n                height: 42px;\n                width: 100%;\n                color: $t1-base-color;\n                fill: $t1-base-color;\n                border-radius: 21px;\n                z-index: 1;\n                display: flex;\n                align-items: center;\n                justify-content: space-between;\n                -webkit-transition: 0.4s;\n                transition: 0.4s;\n    \n                &.bottom {\n                    right: 0px;\n                    left: 0px;\n                    // width: 110px;\n                }\n    \n                &.top {\n                    left: 0px;\n                    right: 0px;\n                    // width: 110px;\n                }\n    \n                &:before {\n                    pointer-events: none;\n                    position: absolute;\n                    content: \"\";\n                    height: 42px;\n                    width: 200%;\n                    border-radius: 21px;\n                    -webkit-transition: 0.4s;\n                    transition: 0.4s;\n                }\n    \n                &.top:hover {\n                    background-color: #ccc;\n                    box-shadow: 0 3px 5px $shadow-base-color;\n                    color: #fff;\n                    fill: #fff;\n    \n    \n                }\n    \n                &.bottom:hover {\n                    background-color: #ccc;\n                    box-shadow: 0 3px 5px $shadow-base-color;\n                    color: #fff;\n                    fill: #fff;\n                }\n            }\n        }\n    }    \n}\n\n",
                    "styleUrl": "./toggle-horizontal.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 20,
                "jsdoctags": [
                    {
                        "name": "cdr",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<div class=\"toggle-container\" #toggleContainer>\n    <div class=\"da-toggle-horizontal-wrapper\" [ngStyle]=\"{ 'width': toggleWidth }\">\n        <div class=\"da-toggle-horizontal-label\" [ngClass]=\"{'light' : light}\" *ngIf=\"label\">{{label}}</div>\n        <div class=\"da-toggle-horizontal\" [ngClass]=\"{'light' : light}\">\n            <ng-container *ngFor=\"let option of options; let num = index\">\n                <label class=\"da-switch top\" [ngStyle]=\"{ 'width': elementWidth }\">\n                    <input \n                        type=\"radio\" \n                        (change)=\"sendValue($event)\" \n                        [name]=\"name\" \n                        [value]=\"option.value\"\n                        [checked]=\"getCheckedOption(option.value)\"\n                    >\n                    <div class=\"da-switch-slider top\" [ngClass]=\"{'light' : light}\" [ngStyle]=\"{ 'width': elementWidth }\">\n                        <span class=\"da-switch-label\">{{option.label}}</span>\n                        <svg-icon class=\"da-switch-icon\" src=\"assets/images/circleCheck.svg\"></svg-icon>\n                    </div>\n                </label>\n            </ng-container>\n        </div>\n    </div>\n</div>"
        },
        {
            "name": "ToggleTristateComponent",
            "id": "component-ToggleTristateComponent-5725d534a22c8e47019e630987d73d33e867145700c77458e6bbee022c3680e3a6c55b9b18bacbef8ace193718f664fce64f6191d3c4850b84034ee5368c0a0d",
            "file": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-toggle-tristate",
            "styleUrls": [
                "./toggle-tristate.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle-tristate.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "name",
                    "defaultValue": "'tristate-input'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "switchValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\n\n@Component({\n  selector: 'lib-toggle-tristate',\n  templateUrl: './toggle-tristate.component.html',\n  styleUrls: ['./toggle-tristate.component.scss']\n})\nexport class ToggleTristateComponent implements OnInit {\n  @Input() tabs: any;\n  @Input() name: string = 'tristate-input'\n  @Output() public switchValue:EventEmitter<any> = new EventEmitter<string>();\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n  getValue(e: any) {\n    this.switchValue.emit(e.srcElement.value);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\";  \n\n.da-toggle-tristate {\n    font-family: $font;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 200px;\n    height: 42px;\n    border-radius: 21px;\n    background-color: #fff;\n    box-shadow: 0 3px 5px $shadow-base-color;\n\n    .da-tab {\n        position: relative;\n        cursor: pointer;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        border-radius: 21px;\n        width: 100px;\n        height: 42px;\n        -webkit-transition: 0.4s;\n        transition: 0.4s;\n\n\n        input {\n            opacity: 0;\n            width: 0;\n            height: 0;\n\n            &:checked + .da-tab-slider {\n                background-color: $tab-background;\n                color: #fff;\n                box-shadow: 0 3px 5px $shadow-base-color;\n                z-index: 2;\n                height: 50px;\n                border-radius: 25px;\n                top: -4px;\n            }\n        }\n\n        .da-tab-slider {\n            position: absolute;\n            cursor: pointer;\n            top: 0;\n            bottom: 0;\n            height: 42px;\n            width: 100%;\n            color: $t1-base-color;\n            border-radius: 21px;\n            z-index: 1;\n            display: flex;\n            align-items: center;\n            justify-content: space-around;\n            -webkit-transition: 0.4s;\n            transition: 0.4s;\n\n            &:before {\n                position: absolute;\n                content: \"\";\n                height: 42px;\n                width: 100%;\n                border-radius: 21px;\n                -webkit-transition: 0.4s;\n                transition: 0.4s;\n            }\n\n            .da-tab-label {\n                position: relative;\n                white-space: nowrap;\n                pointer-events: none;\n                z-index: 1;\n            }\n    \n            .da-tab-state {\n                background-color: $attention-color;\n                width: 14px;\n                height: 14px;\n                border-radius: 7px;\n                box-shadow: 0 -1px 5px $shadow-base-color;\n                position: absolute;\n                bottom: -7px;\n                // right: 20px;\n\n                &.success {\n                    background-color: $success-color;\n                }\n\n                &.error {\n                    background-color: $warning-base-color;\n                }\n            }\n        }\n    }\n}\n\n",
                    "styleUrl": "./toggle-tristate.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"da-toggle-tristate\">\n    <label class=\"da-tab\" *ngFor=\"let tab of tabs; let num = index\">\n        <input \n            type=\"radio\" \n            (change)=\"getValue($event)\" \n            [name]=\"tab.name\" \n            [checked]=\"tab.checked\"\n            [value]=\"tab.value\"\n        >\n        <div class=\"da-tab-slider\">\n            <span class=\"da-tab-label\">{{tab.label}}</span>\n            <span class=\"da-tab-state\" [ngClass]=\"tab.state === 'success' ? 'success' : tab.state === 'error' ? 'error' : 'warning'\"></span>\n        </div>\n    </label>\n</div>\n\n"
        },
        {
            "name": "ToggleVerticalComponent",
            "id": "component-ToggleVerticalComponent-b0cd4fb43a620c84d6a87cc5383eeab802e9d9739a33c8e5ec37839c93e094f8bec257c7975ff912154a80d0105f58ccb4a8a79c8b98a324340c7ba25faf8327",
            "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-toggle-vertical",
            "styleUrls": [
                "./toggle-vertical.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle-vertical.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "inputDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "localValue",
                    "defaultValue": "'localValue'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multiLine",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 8,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "switchValue",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "getCheckedOption",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "sendValue",
                    "args": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n@Component({\n  selector: 'lib-toggle-vertical',\n  templateUrl: './toggle-vertical.component.html',\n  styleUrls: ['./toggle-vertical.component.scss']\n})\nexport class ToggleVerticalComponent {\n  @Input() name: string = 'name';\n  @Input() options: any;\n  @Input() light: boolean = false;\n  @Input() inputDisabled: boolean = false;\n  @Input() multiLine: boolean = false;\n  @Input() localValue: string = 'localValue';\n\n  @Output() public switchValue:EventEmitter<any> = new EventEmitter<string>();\n  \n  constructor() {}\n\n  getCheckedOption(value: string) {\n    return this.localValue === value;\n  }\n\n  sendValue(e: any) {\n    this.localValue = e;\n    this.switchValue.emit(e.srcElement.value);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\";  \n\n.da-toggle-vertical {\n    font-family: $font;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 200px;\n    overflow: hidden;\n    flex-direction: column;\n    border-radius: 21px;\n    background-color: #fff;\n    box-shadow: 0 3px 5px $shadow-base-color;\n\n    &.light {\n        box-shadow: 0 3px 5px $shadow-secondary-color;\n    }\n\n    .da-switch {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n        cursor: pointer;\n        top: 0;\n        left: 0;\n        right: 0;\n        bottom: 0;\n        border-radius: 21px;\n        width: 200px;\n        height: 42px;\n        -webkit-transition: 0.4s;\n        transition: 0.4s;\n\n        &.disabled {\n            cursor: default;\n        }\n        &.auto-height {\n            min-height: 42px;\n            height: auto;\n        }\n\n        input {\n            opacity: 0;\n            width: 0;\n            height: 0;\n\n            &:checked + .da-switch-slider {\n                background-color: $success-color;\n                color: #fff;\n                fill: #fff;\n                box-shadow: 0 3px 5px $shadow-base-color;\n                z-index: 2;\n            }\n\n            &:checked + .da-switch-slider.light {\n                box-shadow: 0 3px 5px $shadow-secondary-color;\n            }\n\n            &:checked + .da-switch-slider.disabled {\n                background-color: $header-base-color;\n                color: $t1-base-color;\n                fill: $t1-base-color;\n            }\n\n        }\n\n        .da-switch-label {\n            position: relative;\n            white-space: nowrap;\n            pointer-events: none;\n            left: 20px;\n            width: calc(100% - 60px);\n            z-index: 1;\n        }\n        .da-switch-icon {\n            font-size: 1.5rem;\n            z-index: 1;\n            color: #fff;\n            fill: #fff;\n            margin-right: 10px;\n            margin-top: 5px;\n            pointer-events: none;\n        }\n\n        .da-switch-slider {\n            position: relative;\n            cursor: pointer;\n            margin-top: -3px;\n            bottom: 0;\n            height: 42px;\n            width: 100%;\n            color: $t1-base-color;\n            fill: $t1-base-color;\n            border-radius: 21px;\n            z-index: 1;\n            display: flex;\n            align-items: center;\n            justify-content: space-between;\n            -webkit-transition: 0.4s;\n            transition: 0.4s;\n\n            &.top:hover {\n                background-color: #ccc;\n                box-shadow: 0 3px 5px $shadow-base-color;\n                color: #fff;\n                fill: #fff;\n            }\n\n            &.disabled {\n                cursor: auto;\n                pointer-events: none;\n            }\n\n            &.auto-height {\n                min-height: 42px;\n                height: auto;\n\n                .da-switch-label {\n                    white-space: normal;\n                    display: block;\n                    padding: 10px 0;\n                }\n            }\n        }\n    }\n}\n\n",
                    "styleUrl": "./toggle-vertical.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 15
            },
            "templateData": "<div class=\"da-toggle-vertical\" [ngClass]=\"{'light' : light, 'auto-height' : multiLine}\">\n    <ng-container *ngFor=\"let option of options; let num = index\">\n        <label class=\"da-switch top\" [ngClass]=\"{'auto-height' : multiLine, 'disabled': inputDisabled}\">\n            <input \n                type=\"radio\" \n                (change)=\"sendValue($event)\" \n                [name]=\"name\" \n                [disabled]=\"inputDisabled\"\n                [value]=\"option.value\"\n                [checked]=\"getCheckedOption(option.value)\"\n            >\n            <div class=\"da-switch-slider top\" \n                 [ngClass]=\"{'light' : light, \n                             'auto-height' : multiLine, \n                             'disabled': inputDisabled}\">\n                <div class=\"da-switch-label\">{{option.label}}</div>\n                <svg-icon *ngIf=\"!inputDisabled\" class=\"da-switch-icon\" src=\"assets/images/circleCheck.svg\"></svg-icon>\n            </div>\n        </label>\n    </ng-container>\n</div>\n\n"
        },
        {
            "name": "TooltipComponent",
            "id": "component-TooltipComponent-f239a02ae9631b404aa06c24e2bcca66d697e461083db2e2c27ade0ad4b68d3305d31fa2586ad97591182e496811b87c0cb26d0a6d06705703a5999fe39f5792",
            "file": "projects/fm-library/src/lib/info/tooltip/tooltip.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "lib-tooltip",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tooltip.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoWidth",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'assets/images/circleExclamation.svg'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "light",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "text",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'lib-tooltip',\n  templateUrl: './tooltip.component.html',\n  styleUrls: ['./tooltip.component.scss']\n})\nexport class TooltipComponent implements OnInit {\n  @Input() text: string = '';\n  @Input() icon: string = 'assets/images/circleExclamation.svg';\n  @Input() autoWidth: boolean = false;\n  @Input() light: boolean = false;\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import \"../../../styles.scss\"; \n.da-tooltip {\n    background-color: $button-base-color;\n    font-size: $t1-base-size;\n    font-family: $font;\n    color: $t1-secondary-color;\n    max-width: 185px;\n    position: absolute;\n    border-radius: 10px;\n    padding: 10px;\n    display: flex;\n    z-index: 3;\n    margin-top: 15px;\n    justify-content: center;\n    align-items: center;\n\n    &.light {\n        color: $t1-base-color;\n        background-color: $button-secondary-color;\n        box-shadow: 0 3px 5px $shadow-base-color;\n    }\n\n    &.auto-width {\n        max-width: auto;\n    }\n\n.da-tooltip-arrow {\n    width: 20px;\n    height: 20px;\n    position: absolute;\n    top: -20px;\n    left: 20px;\n\n    .da-arrow-up {\n        width: 0; \n        height: 0; \n        border-left: 20px solid transparent;\n        border-right: 20px solid transparent;\n        border-bottom: 20px solid $button-base-color;\n\n        &.light {\n            border-bottom: 20px solid $button-secondary-color;\n        }\n      }\n}\n\n.da-tooltip-icon-wrapper {\n    background: transparent;\n    border-radius: 20px;\n    position: relative;\n    margin-right: 20px;\n    box-shadow: 0 3px 5px $shadow-base-color;\n    width: 20px;\n    height: 20px;\n\n    .da-tooltip-icon {\n        fill: $t1-secondary-color;\n        font-size: 20px;\n    }\n\n    &.light {\n        background: #fff;\n\n        .da-tooltip-icon {\n            fill: $t1-base-color;\n        }\n    }\n}\n}",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 12
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"da-tooltip\" [ngClass]=\"{'light' : light, 'auto-width' : autoWidth}\">\n    <div class=\"da-tooltip-arrow\">\n        <div class=\"da-arrow-up\" [ngClass]=\"{'light' : light}\"></div>\n    </div>\n    <div class=\"da-tooltip-icon-wrapper\" [ngClass]=\"{'light' : light}\">\n        <svg-icon class=\"da-tooltip-icon\" [src]=\"icon\"></svg-icon>\n    </div>\n    <span>{{text | translate}}</span>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "FmLibraryModule",
            "id": "module-FmLibraryModule-652c71ee4576717572fa6fd643a85319a0d25751d3c922fde2730ad8c5a526a468020d181c0609c05af64b3188c9e9fc2bfc8b0f7dbbe9188509bf2745387ff5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/fm-library/src/lib/fm-library.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { FontAwesomeModule } from '@fortawesome/angular-fontawesome';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatDatepickerModule } from '@angular/material/datepicker';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport {MatInputModule} from '@angular/material/input';\nimport { MatNativeDateModule } from '@angular/material/core';\nimport { NgbTooltipModule } from '@ng-bootstrap/ng-bootstrap';\nimport { StarRatingModule } from 'angular-star-rating';\nimport { AngularSvgIconModule } from 'angular-svg-icon';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { MultiTranslateHttpLoader } from \"ngx-translate-multi-http-loader\";\n\nimport { ButtonComponent } from './buttons/button/button.component';\nimport { ButtonGroupComponent } from './buttons/button-group/button-group.component';\nimport { InfoButtonComponent } from './buttons/info-button/info-button.component';\nimport { CounterComponent } from './counter/counter.component';\nimport { DropdownComponent } from './inputs/dropdown/dropdown.component';\nimport { InputComponent } from './inputs/input/input.component';\nimport { InputButtonComponent } from './inputs/input-button/input-button.component';\nimport { InputDateComponent } from './inputs/input-date/input-date.component';\nimport { TileComponent } from './tiles/tile/tile.component';\nimport { TileCheckboxComponent } from './tiles/tile-checkbox/tile-checkbox.component';\nimport { TileCheckboxGroupComponent } from './tiles/tile-checkbox-group/tile-checkbox-group.component';\nimport { TileGroupComponent } from './tiles/tile-group/tile-group.component';\nimport { TileRatingComponent } from './tiles/tile-rating/tile-rating.component';\nimport { ToggleComponent } from './toggle/toggle/toggle.component';\nimport { ToggleVerticalComponent } from './toggle/toggle-vertical/toggle-vertical.component';\nimport { ToggleHorizontalComponent } from './toggle/toggle-horizontal/toggle-horizontal.component';\nimport { ToggleCheckboxComponent } from './toggle/toggle-checkbox/toggle-checkbox.component';\nimport { ToggleTristateComponent } from './toggle/toggle-tristate/toggle-tristate.component';\nimport { TileTextComponent } from './text/tile-text/tile-text.component';\nimport { HeaderTextComponent } from './text/header-text/header-text.component';\nimport { HeaderButtonComponent } from './buttons/header-button/header-button.component';\nimport { ProgressButtonComponent } from './buttons/progress-button/progress-button.component';\nimport { StateIconComponent } from './icons/state-icon/state-icon.component';\nimport { TooltipComponent } from './info/tooltip/tooltip.component';\nimport { TextAreaComponent } from './inputs/text-area/text-area.component';\nimport { HttpBackend } from '@angular/common/http';\n\nexport function HttpLoaderFactory(httpBackend: HttpBackend) {\n  return new MultiTranslateHttpLoader(httpBackend, [\n    {prefix: \"../assets/content/da-texts-\", suffix: \".json\"},\n    // {prefix: environment.host + \"assets/localization/finance-request-enums-\", suffix: \".json\"},\n    // {prefix: environment.host + \"assets/localization/finance-request-label-\", suffix: \".json\"},\n  ]);\n}\n\n@NgModule({\n  declarations: [\n    ButtonComponent,\n    ButtonGroupComponent,\n    InfoButtonComponent,\n    CounterComponent,\n    DropdownComponent,\n    InputComponent,\n    InputButtonComponent,\n    InputDateComponent,\n    TileComponent,\n    TileCheckboxComponent,\n    TileCheckboxGroupComponent,\n    TileGroupComponent,\n    TileRatingComponent,\n    ToggleComponent,\n    ToggleVerticalComponent,\n    ToggleCheckboxComponent,\n    ToggleTristateComponent,\n    TileTextComponent,\n    HeaderTextComponent,\n    HeaderButtonComponent,\n    ProgressButtonComponent,\n    StateIconComponent,\n    TooltipComponent,\n    ToggleHorizontalComponent,\n    TextAreaComponent,\n  ],\n  imports: [\n    CommonModule,\n    FontAwesomeModule,\n    MatSelectModule,\n    MatFormFieldModule, \n    MatDatepickerModule,\n    MatInputModule,\n    MatNativeDateModule,\n    NgbTooltipModule,\n    FormsModule,\n    ReactiveFormsModule,\n    StarRatingModule.forRoot(),\n    AngularSvgIconModule.forRoot(),\n    TranslateModule.forRoot({\n      defaultLanguage: 'de-DE',\n      loader: {\n          provide: TranslateLoader,\n          useFactory: HttpLoaderFactory,\n          deps: [HttpBackend]\n      },\n  }),\n  ],\n  exports: [\n    ButtonComponent,\n    ButtonGroupComponent,\n    InfoButtonComponent,\n    CounterComponent,\n    DropdownComponent,\n    InputComponent,\n    InputButtonComponent,\n    InputDateComponent,\n    TileComponent,\n    TileCheckboxComponent,\n    TileCheckboxGroupComponent,\n    TileGroupComponent,\n    TileRatingComponent,\n    ToggleComponent,\n    ToggleVerticalComponent,\n    ToggleHorizontalComponent,\n    ToggleCheckboxComponent,\n    ToggleTristateComponent,\n    TileTextComponent,\n    HeaderTextComponent,\n    HeaderButtonComponent,\n    ProgressButtonComponent,\n    StateIconComponent,\n    TooltipComponent,\n    TextAreaComponent\n  ]\n})\nexport class FmLibraryModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "ButtonGroupComponent"
                        },
                        {
                            "name": "CounterComponent"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "HeaderButtonComponent"
                        },
                        {
                            "name": "HeaderTextComponent"
                        },
                        {
                            "name": "InfoButtonComponent"
                        },
                        {
                            "name": "InputButtonComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "InputDateComponent"
                        },
                        {
                            "name": "ProgressButtonComponent"
                        },
                        {
                            "name": "StateIconComponent"
                        },
                        {
                            "name": "TextAreaComponent"
                        },
                        {
                            "name": "TileCheckboxComponent"
                        },
                        {
                            "name": "TileCheckboxGroupComponent"
                        },
                        {
                            "name": "TileComponent"
                        },
                        {
                            "name": "TileGroupComponent"
                        },
                        {
                            "name": "TileRatingComponent"
                        },
                        {
                            "name": "TileTextComponent"
                        },
                        {
                            "name": "ToggleCheckboxComponent"
                        },
                        {
                            "name": "ToggleComponent"
                        },
                        {
                            "name": "ToggleHorizontalComponent"
                        },
                        {
                            "name": "ToggleTristateComponent"
                        },
                        {
                            "name": "ToggleVerticalComponent"
                        },
                        {
                            "name": "TooltipComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "ButtonGroupComponent"
                        },
                        {
                            "name": "CounterComponent"
                        },
                        {
                            "name": "DropdownComponent"
                        },
                        {
                            "name": "HeaderButtonComponent"
                        },
                        {
                            "name": "HeaderTextComponent"
                        },
                        {
                            "name": "InfoButtonComponent"
                        },
                        {
                            "name": "InputButtonComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "InputDateComponent"
                        },
                        {
                            "name": "ProgressButtonComponent"
                        },
                        {
                            "name": "StateIconComponent"
                        },
                        {
                            "name": "TextAreaComponent"
                        },
                        {
                            "name": "TileCheckboxComponent"
                        },
                        {
                            "name": "TileCheckboxGroupComponent"
                        },
                        {
                            "name": "TileComponent"
                        },
                        {
                            "name": "TileGroupComponent"
                        },
                        {
                            "name": "TileRatingComponent"
                        },
                        {
                            "name": "TileTextComponent"
                        },
                        {
                            "name": "ToggleCheckboxComponent"
                        },
                        {
                            "name": "ToggleComponent"
                        },
                        {
                            "name": "ToggleHorizontalComponent"
                        },
                        {
                            "name": "ToggleTristateComponent"
                        },
                        {
                            "name": "ToggleVerticalComponent"
                        },
                        {
                            "name": "TooltipComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Active",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: 'active button',\n    active: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "currency",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    type: 'text',\n    isCurrency: true,\n  },\n}"
            },
            {
                "name": "customWidth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: 'weiter',\n    width: '200',\n    iconRight: 'assets/images/chevronRight.svg',\n    light: false,\n  },\n}"
            },
            {
                "name": "Dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/counter/counter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    placeholder: '0',\n    value: 0,\n    step: 1,\n    min: 0,\n    max: 10,\n    name: 'name',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "Dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/text/header-text/header-text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'die Headline',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "Dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'der Text',\n    light: true,\n    size: '16px',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "Dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    tiles: testTilesDark\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "Dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle/toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label1: 'Ja',\n    label2: 'Nein',\n    value1: 'true',\n    value2: 'false',\n    name: 'name',\n    localValue: 'true',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "Dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-checkbox/toggle-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    checked: true,\n    light: true,\n    dynLabelClassName: 'dynamic-class'\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "Dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: testOptions3,\n    localValue: '',\n    name: 'name',\n    light: true,\n    elementWidth: '100px',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "Dark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: testOptions2,\n    localValue: '',\n    name: 'name',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "Dashboard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'button label',\n    icon: 'assets/images/barsProgress.svg',\n    state: 'closed',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/counter/counter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    placeholder: '0',\n    value: 0,\n    step: 1,\n    min: 0,\n    max: 10,\n    name: 'name',\n    light: false,\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: 'button label',\n    light: false,\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    buttons: testButtons,\n    light: false,\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: 'button label',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/info-button/info-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    light: false,\n    id: 'the-info',\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Stellplätze',\n    icon: 'assets/images/parking.svg',\n    state: 'success',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/info/tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    text: 'Der Info text',\n    icon: 'assets/images/circleInfo.svg',\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'das Label',\n    light: false,\n    icon: 'assets/images/circleCheck.svg',\n    selectedItem: placeholderTest,\n    selectItems: testItems,\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'id',\n    textAlign: 'left',\n    skinnyLabel: true,\n    backgroundColor: 'rgb(255, 255, 255)',\n    borderColor: 'rgb(32, 56, 100)',\n    boxShadowColor: 'rgba(32, 56, 100, 0.5)',\n    textColor: 'red',\n    placeholderType: 'dark'\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.200,00',\n    unit: '€',\n    touched: true,\n    light: false,\n    textAlign: 'center',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: false,\n    placeholder: 'tt.mm.jjjj',\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: '',\n    placeholder: 'placeholder text',\n    label: 'label'\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/text/header-text/header-text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'die Headline',\n    light: false,\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'der Text',\n    light: false,\n    size: '16px',\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/tiles/tile-checkbox/tile-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    image: 'assets/images/signal-bars-poor.svg',\n    checked: false,\n    name: 'name',\n    value: 'the value',\n    state: 'success',\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/tiles/tile-checkbox-group/tile-checkbox-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    tiles: testTiles\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    tiles: testTiles\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle/toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label1: 'Ja',\n    label2: 'Nein',\n    value1: 'true',\n    value2: 'false',\n    name: 'name',\n    localValue: '',\n    light: false,\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-checkbox/toggle-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    checked: true,\n    light: false,\n    dynLabelClassName: 'dynamic-class'\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: testOptions3,\n    localValue: '',\n    name: 'name',\n    light: false,\n    toggleWidth: '500px',\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    tabs: testTabsThree\n  },\n}"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: testOptions2,\n    localValue: '',\n    name: 'name',\n    light: false,\n  },\n}"
            },
            {
                "name": "Default4Stars",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/tiles/tile-rating/tile-rating.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'name',\n    stars: 4,\n    info: 'rating-info',\n  },\n}"
            },
            {
                "name": "Default5Stars",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/tiles/tile-rating/tile-rating.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'name',\n    stars: 5,\n    info: 'info-rating-dark',\n  },\n}"
            },
            {
                "name": "DefaultDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: 'button label',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "DefaultDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    buttons: testButtons,\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "DefaultDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/info-button/info-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "DefaultDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/info/tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    text: 'Der Infotext',\n    light: true,\n    icon: 'assets/images/circleInfo.svg',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "DefaultDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'das Label',\n    light: true,\n    icon: 'assets/images/circleCheck.svg',\n    selectItems: testItems,\n    selectedItem: placeholderTest,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "DefaultDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '',\n    type: 'text',\n    placeholder: '0,00',\n    unit: '€',\n    touched: false,\n    error: false,\n    light: true,\n    errorText: 'die Fehlermeldung',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n    textAlign: 'left',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "DefaultDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.200,00',\n    unit: '€',\n    touched: true,\n    light: true,\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "DefaultDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: true,\n    placeholder: 'tt.mm.jjjj',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "DefaultDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    value: '',\n    light: true,\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: 'ganz langer Text, zum Beispiel Anschlussfinanzierung',\n    type: 'text',\n    inputDisabled: true,\n  },\n}"
            },
            {
                "name": "disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: 'the value',\n    touched: true,\n    inputDisabled: true,\n    light: false,\n  },\n}"
            },
            {
                "name": "disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: 'der Text',\n    inputDisabled: true,\n    touched: true,\n  },\n}"
            },
            {
                "name": "disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: testOptions2,\n    localValue: 'value2',\n    inputDisabled: true,\n    name: 'name',\n    light: false,\n  },\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: 'disabled button',\n    disabled: true,\n    light: false,\n  },\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: 'disabled button',\n    disabled: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'disabled',\n    disabled: true,\n    icon: 'assets/images/user.svg',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle/toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label1: 'Ja',\n    label2: 'Nein',\n    value1: 'true',\n    value2: 'false',\n    name: 'name',\n    inputDisabled: true,\n    localValue: 'true',\n    light: false,\n  },\n}"
            },
            {
                "name": "DisabledDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: 'disabled button',\n    disabled: true,\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "Ende",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Info',\n    icon: 'assets/images/circleExclamation.svg',\n    state: 'end',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: 'falscher input',\n    type: 'text',\n    placeholder: '0,00',\n    unit: '€',\n    touched: true,\n    error: true,\n    light: false,\n    errorText: 'die Fehlermeldung',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
            },
            {
                "name": "error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.200,00',\n    unit: '€',\n    touched: false,\n    light: false,\n    error: true,\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
            },
            {
                "name": "error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: false,\n    placeholder: 'tt.mm.jjjj',\n    value: new Date(),\n    touched: true,\n    error: true,\n    errorText: 'die Fehlermeldung',\n  },\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    state: 'error',\n  },\n}"
            },
            {
                "name": "errorDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: 'falscher input',\n    type: 'text',\n    placeholder: '0,00',\n    unit: '€',\n    touched: true,\n    error: true,\n    light: true,\n    errorText: 'die Fehlermeldung',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "errorDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: true,\n    placeholder: 'tt.mm.jjjj',\n    value: new Date(),\n    touched: true,\n    error: true,\n    errorText: 'die Fehlermeldung',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "FiveOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: testOptions5,\n    localValue: '',\n    name: 'name',\n    light: false,\n    elementWidth: '100px',\n  },\n}"
            },
            {
                "name": "FiveOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: testOptions5,\n    localValue: '',\n    name: 'name',\n    light: false,\n  },\n}"
            },
            {
                "name": "Icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Fortschritt speichern',\n    iconButton: true,\n    icon: 'assets/images/diskSave.svg',\n    light: false,\n  },\n}"
            },
            {
                "name": "Icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    icon: 'assets/images/user.svg',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "IconDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'Fortschritt speichern',\n    iconButton: true,\n    icon: 'assets/images/diskSave.svg',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "IconLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: 'zurück',\n    iconLeft: 'assets/images/chevronLeft.svg',\n    light: false,\n  },\n}"
            },
            {
                "name": "IconLeftDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: 'zurück',\n    iconLeft: 'assets/images/chevronLeft.svg',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "IconRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: 'weiter',\n    iconRight: 'assets/images/chevronRight.svg',\n    light: false,\n  },\n}"
            },
            {
                "name": "IconRightDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: 'weiter',\n    iconRight: 'assets/images/chevronRight.svg',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "Inactive",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    value: 'inactive button',\n    inactive: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "multiLine",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    options: testOptions3,\n    multiLine: true,\n    name: 'name',\n    light: false,\n  },\n}"
            },
            {
                "name": "multipleRows",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    multiLine: true,\n    value: 'ganz langer Text, <br> zum Beispiel Anschlussfinanzierung. Kann auch <a href=\"#\">links</a> enthalten.',\n  },\n}"
            },
            {
                "name": "multipleRowsTouched",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    touched: true,\n    multiLine: true,\n    value: 'ganz langer Text, <br> zum Beispiel Anschlussfinanzierung. Kann auch <a href=\"#\">links</a> enthalten.',\n  },\n}"
            },
            {
                "name": "noValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    touched: false,\n    light: false,\n  },\n}"
            },
            {
                "name": "Optional",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    state: 'optional',\n  },\n}"
            },
            {
                "name": "placeholderTest",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n    'value': 'value0',\n    'viewValue': 'Placeholder'\n  }"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/.storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    layout: 'centered',\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n    backgrounds: {\n      default: 'hell',\n      values: [\n        {\n          name: 'hell',\n          value: '#C0D1E1',\n        },\n        {\n          name: 'dunkel',\n          value: '#203864',\n        },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "short",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '90',\n    unit: '%',\n    touched: true,\n    short: true,\n    light: false,\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
            },
            {
                "name": "shortDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '90',\n    unit: '%',\n    touched: true,\n    short: true,\n    light: true,\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.100,00',\n    type: 'text',\n    placeholder: '0,00',\n    unit: '€',\n    touched: true,\n    error: false,\n    light: false,\n    errorText: 'die Fehlermeldung',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    state: 'success',\n  },\n}"
            },
            {
                "name": "successDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.100,00',\n    type: 'text',\n    placeholder: '0,00',\n    unit: '€',\n    touched: true,\n    error: false,\n    light: true,\n    errorText: 'die Fehlermeldung',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "testButtons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    'iconLeft': 'assets/images/chevronLeft.svg',\n    'value': 'zurück',\n    'type': 'back'\n  },\n  {\n    'label': 'Fortschritt speichern',\n    'iconButton': true,\n    'icon': 'assets/images/diskSave.svg',\n    'type': 'save',\n  },\n  {\n    'iconRight': 'assets/images/chevronRight.svg',\n    'value': 'weiter',\n    'type': 'next',\n    'disabled': true,\n  }\n]"
            },
            {
                "name": "testButtonsCustomWidth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    'iconLeft': 'assets/images/chevronLeft.svg',\n    'value': 'zurück',\n    'type': 'back'\n  },\n  {\n    'label': 'Fortschritt speichern',\n    'iconButton': true,\n    'icon': 'assets/images/diskSave.svg',\n    'type': 'save',\n  },\n  {\n    'iconRight': 'assets/images/chevronRight.svg',\n    'value': 'zum Finanzierungszertifikat',\n    'type': 'next',\n    'disabled': true,\n    'width': '220'\n  }\n]"
            },
            {
                "name": "testItems",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    'value': 'value1',\n    'viewValue': 'Option 1'\n  },\n  {\n    'value': 'value2',\n    'viewValue': 'Option 2'\n  },\n  {\n    'value': 'value3',\n    'viewValue': 'Option 3'\n  },\n  {\n    'value': 'value4',\n    'viewValue': 'Option 4'\n  },\n  {\n    'value': 'value5',\n    'viewValue': 'Option 5'\n  },\n  {\n    'value': 'value6',\n    'viewValue': 'Option 6'\n  }\n]"
            },
            {
                "name": "testOptions2",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    'label': 'label1',\n    'value': 'value1'\n  },\n  {\n    'label': 'label2',\n    'value': 'value2'\n  }\n]"
            },
            {
                "name": "testOptions3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    'label': 'label1',\n    'value': 'value1'\n  },\n  {\n    'label': 'label2',\n    'value': 'value2'\n  },\n  {\n    'label': 'label3',\n    'value': 'value3'\n  }\n]"
            },
            {
                "name": "testOptions3",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    'label': 'label1',\n    'value': 'value1'\n  },\n  {\n    'label': 'Grundstück wird für das Neubauvorhaben verwendet',\n    'value': 'value2'\n  }\n]"
            },
            {
                "name": "testOptions5",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    'label': 'label1',\n    'value': 'value1'\n  },\n  {\n    'label': 'label2',\n    'value': 'value2'\n  },\n  {\n    'label': 'label3',\n    'value': 'value3'\n  },\n  {\n    'label': 'label4',\n    'value': 'value4'\n  },\n  {\n    'label': 'label5',\n    'value': 'value5'\n  }\n]"
            },
            {
                "name": "testOptions5",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    'label': 'label1',\n    'value': 'value1'\n  },\n  {\n    'label': 'label2',\n    'value': 'value2'\n  },\n  {\n    'label': 'label3',\n    'value': 'value3'\n  },\n  {\n    'label': 'label4',\n    'value': 'value4'\n  },\n  {\n    'label': 'label5',\n    'value': 'value5'\n  }\n]"
            },
            {
                "name": "testTabsThree",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    'label': 'N° 1',\n    'name': 'name',\n    'state': 'success',\n    'value': 'value1',\n    'checked': true\n  },\n  {\n    'label': 'N° 2',\n    'name': 'name',\n    'value': 'value2',\n    'checked': false\n  },\n  {\n    'label': 'N° 3',\n    'name': 'name',\n    'state': 'success',\n    'value': 'value3',\n    'checked': false\n  }\n]"
            },
            {
                "name": "testTabsTwo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    'label': 'N° 1',\n    'name': 'name',\n    'state': 'error',\n    'value': 'value1',\n    'checked': true\n  },\n  {\n    'label': 'N° 2',\n    'name': 'name',\n    'value': 'value2',\n    'checked': false\n  }\n]"
            },
            {
                "name": "testTiles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/tiles/tile-checkbox-group/tile-checkbox-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    'label': 'label1',\n    'name': 'name',\n    'state': 'success',\n    'checked': false,\n    'image': 'assets/images/houseCheckmark.svg',\n    'value': 'value1'\n  },\n  {\n    'label': 'label2',\n    'name': 'name',\n    'state': 'warning',\n    'checked': false,\n    'image': 'assets/images/houseFlag.svg',\n    'value': 'value2'\n  },\n  {\n    'label': 'label3',\n    'name': 'name',\n    'state': 'error',\n    'checked': false,\n    'image': 'assets/images/houseTree.svg',\n    'value': 'value3'\n  }\n]"
            },
            {
                "name": "testTiles",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    'label': 'label1',\n    'name': 'name',\n    'state': 'success',\n    'checked': false,\n    'image': 'assets/images/houseCheckmark.svg',\n    'value': 'value1'\n  },\n  {\n    'label': 'label2',\n    'name': 'name',\n    'state': 'warning',\n    'checked': false,\n    'image': 'assets/images/houseFlag.svg',\n    'value': 'value2'\n  },\n  {\n    'label': 'label3',\n    'name': 'name',\n    'state': 'error',\n    'checked': false,\n    'image': 'assets/images/houseTree.svg',\n    'value': 'value3'\n  }\n]"
            },
            {
                "name": "testTilesDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    'label': 'label1',\n    'name': 'name',\n    'state': 'success',\n    'checked': false,\n    'image': 'assets/images/houseCheckmark.svg',\n    'value': 'value1',\n    'dark': true,\n  },\n  {\n    'label': 'label2',\n    'name': 'name',\n    'state': 'warning',\n    'checked': false,\n    'image': 'assets/images/houseFlag.svg',\n    'value': 'value2',\n    'dark': true,\n  },\n  {\n    'label': 'label3',\n    'name': 'name',\n    'state': 'error',\n    'checked': false,\n    'image': 'assets/images/houseTree.svg',\n    'value': 'value3',\n    'dark': true,\n  }\n]"
            },
            {
                "name": "TwoTabs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    tabs: testTabsTwo\n  },\n}"
            },
            {
                "name": "warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.200,00',\n    unit: '€',\n    touched: false,\n    light: false,\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    state: 'warning',\n  },\n}"
            },
            {
                "name": "warningDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.200,00',\n    unit: '€',\n    touched: false,\n    light: true,\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "withCustomWidth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    buttons: testButtonsCustomWidth,\n    light: false,\n    custom: true,\n  },\n}"
            },
            {
                "name": "withInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '',\n    type: 'text',\n    placeholder: '0,00',\n    unit: '€',\n    touched: false,\n    error: false,\n    light: false,\n    errorText: 'die Fehlermeldung',\n    info: 'test-info',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
            },
            {
                "name": "withInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.200,00',\n    unit: '€',\n    touched: true,\n    light: false,\n    info: 'test-info',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
            },
            {
                "name": "withInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    light: false,\n    value: 'Input kann auch <a href=\"#\">links</a.',\n    info: 'test-info',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
            },
            {
                "name": "WithInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'das Label',\n    light: false,\n    icon: 'assets/images/circleCheck.svg',\n    selectItems: testItems,\n    selectedItem: placeholderTest,\n    info: 'dropdown-info',\n  },\n}"
            },
            {
                "name": "WithInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: false,\n    placeholder: 'tt.mm.jjjj',\n    info: 'date-info',\n  },\n}"
            },
            {
                "name": "WithInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/text/header-text/header-text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'die Headline',\n    light: false,\n    info: 'text-info',\n  },\n}"
            },
            {
                "name": "WithInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'der Text',\n    light: false,\n    info: 'text-info',\n    size: '16px',\n  },\n}"
            },
            {
                "name": "withInfoDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '',\n    type: 'text',\n    placeholder: '0,00',\n    unit: '€',\n    touched: false,\n    error: false,\n    light: true,\n    errorText: 'die Fehlermeldung',\n    info: 'test-info-dark',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "withInfoDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.200,00',\n    unit: '€',\n    touched: true,\n    light: true,\n    info: 'test-info',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "withInfoDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'das Label',\n    value: '',\n    light: true,\n    info: 'test-info-dark',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "WithInfoDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'das Label',\n    light: true,\n    icon: 'assets/images/circleCheck.svg',\n    selectItems: testItems,\n    selectedItem: placeholderTest,\n    info: 'dropdown-info-dark',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "WithInfoDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: true,\n    placeholder: 'tt.mm.jjjj',\n    info: 'date-info-dark',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "WithInfoDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/text/header-text/header-text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'die Headline',\n    light: true,\n    info: 'text-info-dark',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "WithInfoDark",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'der Text',\n    light: true,\n    info: 'text-info-dark',\n    size: '16px',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
            },
            {
                "name": "WithMaxDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: false,\n    placeholder: 'tt.mm.jjjj',\n    maxDate: new Date(),\n  },\n}"
            },
            {
                "name": "WithSelectedDate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: false,\n    placeholder: 'tt.mm.jjjj',\n    value: new Date(),\n  },\n}"
            }
        ],
        "functions": [
            {
                "name": "HttpLoaderFactory",
                "file": "projects/fm-library/src/lib/fm-library.module.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "projects/fm-library/src/lib/info/tooltip/tooltip.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "HttpLoaderFactory",
                "file": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "httpBackend",
                        "type": "HttpBackend",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<CounterComponent>",
                "file": "projects/fm-library/src/lib/counter/counter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonGroupComponent>",
                "file": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderButtonComponent>",
                "file": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InfoButtonComponent>",
                "file": "projects/fm-library/src/lib/buttons/info-button/info-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ProgressButtonComponent>",
                "file": "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<StateIconComponent>",
                "file": "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TooltipComponent>",
                "file": "projects/fm-library/src/lib/info/tooltip/tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<DropdownComponent>",
                "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InputComponent>",
                "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InputButtonComponent>",
                "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InputDateComponent>",
                "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TextAreaComponent>",
                "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<HeaderTextComponent>",
                "file": "projects/fm-library/src/lib/text/header-text/header-text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TileTextComponent>",
                "file": "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TileCheckboxComponent>",
                "file": "projects/fm-library/src/lib/tiles/tile-checkbox/tile-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TileCheckboxGroupComponent>",
                "file": "projects/fm-library/src/lib/tiles/tile-checkbox-group/tile-checkbox-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TileGroupComponent>",
                "file": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<TileRatingComponent>",
                "file": "projects/fm-library/src/lib/tiles/tile-rating/tile-rating.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ToggleComponent>",
                "file": "projects/fm-library/src/lib/toggle/toggle/toggle.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ToggleCheckboxComponent>",
                "file": "projects/fm-library/src/lib/toggle/toggle-checkbox/toggle-checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ToggleHorizontalComponent>",
                "file": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ToggleTristateComponent>",
                "file": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ToggleVerticalComponent>",
                "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 177
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts": [
                {
                    "name": "Active",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: 'active button',\n    active: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: 'button label',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: 'disabled button',\n    disabled: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    icon: 'assets/images/user.svg',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Inactive",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: 'inactive button',\n    inactive: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/inputs/input/input.stories.ts": [
                {
                    "name": "currency",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    type: 'text',\n    isCurrency: true,\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'id',\n    textAlign: 'left',\n    skinnyLabel: true,\n    backgroundColor: 'rgb(255, 255, 255)',\n    borderColor: 'rgb(32, 56, 100)',\n    boxShadowColor: 'rgba(32, 56, 100, 0.5)',\n    textColor: 'red',\n    placeholderType: 'dark'\n  },\n}"
                },
                {
                    "name": "DefaultDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '',\n    type: 'text',\n    placeholder: '0,00',\n    unit: '€',\n    touched: false,\n    error: false,\n    light: true,\n    errorText: 'die Fehlermeldung',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n    textAlign: 'left',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: 'ganz langer Text, zum Beispiel Anschlussfinanzierung',\n    type: 'text',\n    inputDisabled: true,\n  },\n}"
                },
                {
                    "name": "error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: 'falscher input',\n    type: 'text',\n    placeholder: '0,00',\n    unit: '€',\n    touched: true,\n    error: true,\n    light: false,\n    errorText: 'die Fehlermeldung',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
                },
                {
                    "name": "errorDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: 'falscher input',\n    type: 'text',\n    placeholder: '0,00',\n    unit: '€',\n    touched: true,\n    error: true,\n    light: true,\n    errorText: 'die Fehlermeldung',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.100,00',\n    type: 'text',\n    placeholder: '0,00',\n    unit: '€',\n    touched: true,\n    error: false,\n    light: false,\n    errorText: 'die Fehlermeldung',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
                },
                {
                    "name": "successDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.100,00',\n    type: 'text',\n    placeholder: '0,00',\n    unit: '€',\n    touched: true,\n    error: false,\n    light: true,\n    errorText: 'die Fehlermeldung',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "withInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '',\n    type: 'text',\n    placeholder: '0,00',\n    unit: '€',\n    touched: false,\n    error: false,\n    light: false,\n    errorText: 'die Fehlermeldung',\n    info: 'test-info',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
                },
                {
                    "name": "withInfoDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '',\n    type: 'text',\n    placeholder: '0,00',\n    unit: '€',\n    touched: false,\n    error: false,\n    light: true,\n    errorText: 'die Fehlermeldung',\n    info: 'test-info-dark',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/buttons/button/button.stories.ts": [
                {
                    "name": "customWidth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: 'weiter',\n    width: '200',\n    iconRight: 'assets/images/chevronRight.svg',\n    light: false,\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: 'button label',\n    light: false,\n  },\n}"
                },
                {
                    "name": "DefaultDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: 'button label',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: 'disabled button',\n    disabled: true,\n    light: false,\n  },\n}"
                },
                {
                    "name": "DisabledDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: 'disabled button',\n    disabled: true,\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Fortschritt speichern',\n    iconButton: true,\n    icon: 'assets/images/diskSave.svg',\n    light: false,\n  },\n}"
                },
                {
                    "name": "IconDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Fortschritt speichern',\n    iconButton: true,\n    icon: 'assets/images/diskSave.svg',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "IconLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: 'zurück',\n    iconLeft: 'assets/images/chevronLeft.svg',\n    light: false,\n  },\n}"
                },
                {
                    "name": "IconLeftDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: 'zurück',\n    iconLeft: 'assets/images/chevronLeft.svg',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "IconRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: 'weiter',\n    iconRight: 'assets/images/chevronRight.svg',\n    light: false,\n  },\n}"
                },
                {
                    "name": "IconRightDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: 'weiter',\n    iconRight: 'assets/images/chevronRight.svg',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/counter/counter.stories.ts": [
                {
                    "name": "Dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/counter/counter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    placeholder: '0',\n    value: 0,\n    step: 1,\n    min: 0,\n    max: 10,\n    name: 'name',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/counter/counter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    placeholder: '0',\n    value: 0,\n    step: 1,\n    min: 0,\n    max: 10,\n    name: 'name',\n    light: false,\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/text/header-text/header-text.stories.ts": [
                {
                    "name": "Dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/text/header-text/header-text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'die Headline',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/text/header-text/header-text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'die Headline',\n    light: false,\n  },\n}"
                },
                {
                    "name": "WithInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/text/header-text/header-text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'die Headline',\n    light: false,\n    info: 'text-info',\n  },\n}"
                },
                {
                    "name": "WithInfoDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/text/header-text/header-text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'die Headline',\n    light: true,\n    info: 'text-info-dark',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts": [
                {
                    "name": "Dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'der Text',\n    light: true,\n    size: '16px',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'der Text',\n    light: false,\n    size: '16px',\n  },\n}"
                },
                {
                    "name": "WithInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'der Text',\n    light: false,\n    info: 'text-info',\n    size: '16px',\n  },\n}"
                },
                {
                    "name": "WithInfoDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'der Text',\n    light: true,\n    info: 'text-info-dark',\n    size: '16px',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts": [
                {
                    "name": "Dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    tiles: testTilesDark\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    tiles: testTiles\n  },\n}"
                },
                {
                    "name": "testTiles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    'label': 'label1',\n    'name': 'name',\n    'state': 'success',\n    'checked': false,\n    'image': 'assets/images/houseCheckmark.svg',\n    'value': 'value1'\n  },\n  {\n    'label': 'label2',\n    'name': 'name',\n    'state': 'warning',\n    'checked': false,\n    'image': 'assets/images/houseFlag.svg',\n    'value': 'value2'\n  },\n  {\n    'label': 'label3',\n    'name': 'name',\n    'state': 'error',\n    'checked': false,\n    'image': 'assets/images/houseTree.svg',\n    'value': 'value3'\n  }\n]"
                },
                {
                    "name": "testTilesDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    'label': 'label1',\n    'name': 'name',\n    'state': 'success',\n    'checked': false,\n    'image': 'assets/images/houseCheckmark.svg',\n    'value': 'value1',\n    'dark': true,\n  },\n  {\n    'label': 'label2',\n    'name': 'name',\n    'state': 'warning',\n    'checked': false,\n    'image': 'assets/images/houseFlag.svg',\n    'value': 'value2',\n    'dark': true,\n  },\n  {\n    'label': 'label3',\n    'name': 'name',\n    'state': 'error',\n    'checked': false,\n    'image': 'assets/images/houseTree.svg',\n    'value': 'value3',\n    'dark': true,\n  }\n]"
                }
            ],
            "projects/fm-library/src/lib/toggle/toggle/toggle.stories.ts": [
                {
                    "name": "Dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle/toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label1: 'Ja',\n    label2: 'Nein',\n    value1: 'true',\n    value2: 'false',\n    name: 'name',\n    localValue: 'true',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle/toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label1: 'Ja',\n    label2: 'Nein',\n    value1: 'true',\n    value2: 'false',\n    name: 'name',\n    localValue: '',\n    light: false,\n  },\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle/toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label1: 'Ja',\n    label2: 'Nein',\n    value1: 'true',\n    value2: 'false',\n    name: 'name',\n    inputDisabled: true,\n    localValue: 'true',\n    light: false,\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/toggle/toggle-checkbox/toggle-checkbox.stories.ts": [
                {
                    "name": "Dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-checkbox/toggle-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    checked: true,\n    light: true,\n    dynLabelClassName: 'dynamic-class'\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-checkbox/toggle-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    checked: true,\n    light: false,\n    dynLabelClassName: 'dynamic-class'\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts": [
                {
                    "name": "Dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: testOptions3,\n    localValue: '',\n    name: 'name',\n    light: true,\n    elementWidth: '100px',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: testOptions3,\n    localValue: '',\n    name: 'name',\n    light: false,\n    toggleWidth: '500px',\n  },\n}"
                },
                {
                    "name": "FiveOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: testOptions5,\n    localValue: '',\n    name: 'name',\n    light: false,\n    elementWidth: '100px',\n  },\n}"
                },
                {
                    "name": "testOptions3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    'label': 'label1',\n    'value': 'value1'\n  },\n  {\n    'label': 'label2',\n    'value': 'value2'\n  },\n  {\n    'label': 'label3',\n    'value': 'value3'\n  }\n]"
                },
                {
                    "name": "testOptions5",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    'label': 'label1',\n    'value': 'value1'\n  },\n  {\n    'label': 'label2',\n    'value': 'value2'\n  },\n  {\n    'label': 'label3',\n    'value': 'value3'\n  },\n  {\n    'label': 'label4',\n    'value': 'value4'\n  },\n  {\n    'label': 'label5',\n    'value': 'value5'\n  }\n]"
                }
            ],
            "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts": [
                {
                    "name": "Dark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: testOptions2,\n    localValue: '',\n    name: 'name',\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: testOptions2,\n    localValue: '',\n    name: 'name',\n    light: false,\n  },\n}"
                },
                {
                    "name": "disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: testOptions2,\n    localValue: 'value2',\n    inputDisabled: true,\n    name: 'name',\n    light: false,\n  },\n}"
                },
                {
                    "name": "FiveOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: testOptions5,\n    localValue: '',\n    name: 'name',\n    light: false,\n  },\n}"
                },
                {
                    "name": "multiLine",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    options: testOptions3,\n    multiLine: true,\n    name: 'name',\n    light: false,\n  },\n}"
                },
                {
                    "name": "testOptions2",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    'label': 'label1',\n    'value': 'value1'\n  },\n  {\n    'label': 'label2',\n    'value': 'value2'\n  }\n]"
                },
                {
                    "name": "testOptions3",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    'label': 'label1',\n    'value': 'value1'\n  },\n  {\n    'label': 'Grundstück wird für das Neubauvorhaben verwendet',\n    'value': 'value2'\n  }\n]"
                },
                {
                    "name": "testOptions5",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    'label': 'label1',\n    'value': 'value1'\n  },\n  {\n    'label': 'label2',\n    'value': 'value2'\n  },\n  {\n    'label': 'label3',\n    'value': 'value3'\n  },\n  {\n    'label': 'label4',\n    'value': 'value4'\n  },\n  {\n    'label': 'label5',\n    'value': 'value5'\n  }\n]"
                }
            ],
            "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts": [
                {
                    "name": "Dashboard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'button label',\n    icon: 'assets/images/barsProgress.svg',\n    state: 'closed',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Stellplätze',\n    icon: 'assets/images/parking.svg',\n    state: 'success',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'disabled',\n    disabled: true,\n    icon: 'assets/images/user.svg',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "Ende",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'Info',\n    icon: 'assets/images/circleExclamation.svg',\n    state: 'end',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'header',\n      values: [\n        { name: 'header', value: '#DDE7EE' },\n      ],\n    },\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    buttons: testButtons,\n    light: false,\n  },\n}"
                },
                {
                    "name": "DefaultDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    buttons: testButtons,\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "testButtons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    'iconLeft': 'assets/images/chevronLeft.svg',\n    'value': 'zurück',\n    'type': 'back'\n  },\n  {\n    'label': 'Fortschritt speichern',\n    'iconButton': true,\n    'icon': 'assets/images/diskSave.svg',\n    'type': 'save',\n  },\n  {\n    'iconRight': 'assets/images/chevronRight.svg',\n    'value': 'weiter',\n    'type': 'next',\n    'disabled': true,\n  }\n]"
                },
                {
                    "name": "testButtonsCustomWidth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    'iconLeft': 'assets/images/chevronLeft.svg',\n    'value': 'zurück',\n    'type': 'back'\n  },\n  {\n    'label': 'Fortschritt speichern',\n    'iconButton': true,\n    'icon': 'assets/images/diskSave.svg',\n    'type': 'save',\n  },\n  {\n    'iconRight': 'assets/images/chevronRight.svg',\n    'value': 'zum Finanzierungszertifikat',\n    'type': 'next',\n    'disabled': true,\n    'width': '220'\n  }\n]"
                },
                {
                    "name": "withCustomWidth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    buttons: testButtonsCustomWidth,\n    light: false,\n    custom: true,\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/buttons/info-button/info-button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/info-button/info-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    light: false,\n    id: 'the-info',\n  },\n}"
                },
                {
                    "name": "DefaultDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/buttons/info-button/info-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    light: true,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/info/tooltip/tooltip.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/info/tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    text: 'Der Info text',\n    icon: 'assets/images/circleInfo.svg',\n  },\n}"
                },
                {
                    "name": "DefaultDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/info/tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    text: 'Der Infotext',\n    light: true,\n    icon: 'assets/images/circleInfo.svg',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'das Label',\n    light: false,\n    icon: 'assets/images/circleCheck.svg',\n    selectedItem: placeholderTest,\n    selectItems: testItems,\n  },\n}"
                },
                {
                    "name": "DefaultDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'das Label',\n    light: true,\n    icon: 'assets/images/circleCheck.svg',\n    selectItems: testItems,\n    selectedItem: placeholderTest,\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "placeholderTest",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n    'value': 'value0',\n    'viewValue': 'Placeholder'\n  }"
                },
                {
                    "name": "testItems",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    'value': 'value1',\n    'viewValue': 'Option 1'\n  },\n  {\n    'value': 'value2',\n    'viewValue': 'Option 2'\n  },\n  {\n    'value': 'value3',\n    'viewValue': 'Option 3'\n  },\n  {\n    'value': 'value4',\n    'viewValue': 'Option 4'\n  },\n  {\n    'value': 'value5',\n    'viewValue': 'Option 5'\n  },\n  {\n    'value': 'value6',\n    'viewValue': 'Option 6'\n  }\n]"
                },
                {
                    "name": "WithInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'das Label',\n    light: false,\n    icon: 'assets/images/circleCheck.svg',\n    selectItems: testItems,\n    selectedItem: placeholderTest,\n    info: 'dropdown-info',\n  },\n}"
                },
                {
                    "name": "WithInfoDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'das Label',\n    light: true,\n    icon: 'assets/images/circleCheck.svg',\n    selectItems: testItems,\n    selectedItem: placeholderTest,\n    info: 'dropdown-info-dark',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.200,00',\n    unit: '€',\n    touched: true,\n    light: false,\n    textAlign: 'center',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
                },
                {
                    "name": "DefaultDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.200,00',\n    unit: '€',\n    touched: true,\n    light: true,\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: 'the value',\n    touched: true,\n    inputDisabled: true,\n    light: false,\n  },\n}"
                },
                {
                    "name": "error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.200,00',\n    unit: '€',\n    touched: false,\n    light: false,\n    error: true,\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
                },
                {
                    "name": "noValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    touched: false,\n    light: false,\n  },\n}"
                },
                {
                    "name": "short",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '90',\n    unit: '%',\n    touched: true,\n    short: true,\n    light: false,\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
                },
                {
                    "name": "shortDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '90',\n    unit: '%',\n    touched: true,\n    short: true,\n    light: true,\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.200,00',\n    unit: '€',\n    touched: false,\n    light: false,\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
                },
                {
                    "name": "warningDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.200,00',\n    unit: '€',\n    touched: false,\n    light: true,\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "withInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.200,00',\n    unit: '€',\n    touched: true,\n    light: false,\n    info: 'test-info',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
                },
                {
                    "name": "withInfoDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: '1.200,00',\n    unit: '€',\n    touched: true,\n    light: true,\n    info: 'test-info',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: false,\n    placeholder: 'tt.mm.jjjj',\n  },\n}"
                },
                {
                    "name": "DefaultDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: true,\n    placeholder: 'tt.mm.jjjj',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: false,\n    placeholder: 'tt.mm.jjjj',\n    value: new Date(),\n    touched: true,\n    error: true,\n    errorText: 'die Fehlermeldung',\n  },\n}"
                },
                {
                    "name": "errorDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: true,\n    placeholder: 'tt.mm.jjjj',\n    value: new Date(),\n    touched: true,\n    error: true,\n    errorText: 'die Fehlermeldung',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "WithInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: false,\n    placeholder: 'tt.mm.jjjj',\n    info: 'date-info',\n  },\n}"
                },
                {
                    "name": "WithInfoDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: true,\n    placeholder: 'tt.mm.jjjj',\n    info: 'date-info-dark',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "WithMaxDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: false,\n    placeholder: 'tt.mm.jjjj',\n    maxDate: new Date(),\n  },\n}"
                },
                {
                    "name": "WithSelectedDate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    name: 'id',\n    label: 'Datum eintragen',\n    light: false,\n    placeholder: 'tt.mm.jjjj',\n    value: new Date(),\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    value: '',\n    placeholder: 'placeholder text',\n    label: 'label'\n  },\n}"
                },
                {
                    "name": "DefaultDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    value: '',\n    light: true,\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                },
                {
                    "name": "disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    value: 'der Text',\n    inputDisabled: true,\n    touched: true,\n  },\n}"
                },
                {
                    "name": "multipleRows",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    multiLine: true,\n    value: 'ganz langer Text, <br> zum Beispiel Anschlussfinanzierung. Kann auch <a href=\"#\">links</a> enthalten.',\n  },\n}"
                },
                {
                    "name": "multipleRowsTouched",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'id',\n    touched: true,\n    multiLine: true,\n    value: 'ganz langer Text, <br> zum Beispiel Anschlussfinanzierung. Kann auch <a href=\"#\">links</a> enthalten.',\n  },\n}"
                },
                {
                    "name": "withInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    light: false,\n    value: 'Input kann auch <a href=\"#\">links</a.',\n    info: 'test-info',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n}"
                },
                {
                    "name": "withInfoDark",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    value: '',\n    light: true,\n    info: 'test-info-dark',\n    infoText: 'info Text',\n    infoHeader: 'info Überschrift',\n  },\n  parameters: {\n    backgrounds: {\n      default: 'dunkel',\n      values: [\n        { name: 'dunkel', value: '#203864' },\n      ],\n    },\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/tiles/tile-checkbox/tile-checkbox.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/tiles/tile-checkbox/tile-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    image: 'assets/images/signal-bars-poor.svg',\n    checked: false,\n    name: 'name',\n    value: 'the value',\n    state: 'success',\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/tiles/tile-checkbox-group/tile-checkbox-group.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/tiles/tile-checkbox-group/tile-checkbox-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    tiles: testTiles\n  },\n}"
                },
                {
                    "name": "testTiles",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/tiles/tile-checkbox-group/tile-checkbox-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    'label': 'label1',\n    'name': 'name',\n    'state': 'success',\n    'checked': false,\n    'image': 'assets/images/houseCheckmark.svg',\n    'value': 'value1'\n  },\n  {\n    'label': 'label2',\n    'name': 'name',\n    'state': 'warning',\n    'checked': false,\n    'image': 'assets/images/houseFlag.svg',\n    'value': 'value2'\n  },\n  {\n    'label': 'label3',\n    'name': 'name',\n    'state': 'error',\n    'checked': false,\n    'image': 'assets/images/houseTree.svg',\n    'value': 'value3'\n  }\n]"
                }
            ],
            "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    tabs: testTabsThree\n  },\n}"
                },
                {
                    "name": "testTabsThree",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    'label': 'N° 1',\n    'name': 'name',\n    'state': 'success',\n    'value': 'value1',\n    'checked': true\n  },\n  {\n    'label': 'N° 2',\n    'name': 'name',\n    'value': 'value2',\n    'checked': false\n  },\n  {\n    'label': 'N° 3',\n    'name': 'name',\n    'state': 'success',\n    'value': 'value3',\n    'checked': false\n  }\n]"
                },
                {
                    "name": "testTabsTwo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    'label': 'N° 1',\n    'name': 'name',\n    'state': 'error',\n    'value': 'value1',\n    'checked': true\n  },\n  {\n    'label': 'N° 2',\n    'name': 'name',\n    'value': 'value2',\n    'checked': false\n  }\n]"
                },
                {
                    "name": "TwoTabs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    tabs: testTabsTwo\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/tiles/tile-rating/tile-rating.stories.ts": [
                {
                    "name": "Default4Stars",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/tiles/tile-rating/tile-rating.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'name',\n    stars: 4,\n    info: 'rating-info',\n  },\n}"
                },
                {
                    "name": "Default5Stars",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/tiles/tile-rating/tile-rating.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'das Label',\n    name: 'name',\n    stars: 5,\n    info: 'info-rating-dark',\n  },\n}"
                }
            ],
            "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    state: 'error',\n  },\n}"
                },
                {
                    "name": "Optional",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    state: 'optional',\n  },\n}"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    state: 'success',\n  },\n}"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    state: 'warning',\n  },\n}"
                }
            ],
            "projects/fm-library/.storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/fm-library/.storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    layout: 'centered',\n    actions: { argTypesRegex: \"^on[A-Z].*\" },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n    backgrounds: {\n      default: 'hell',\n      values: [\n        {\n          name: 'hell',\n          value: '#C0D1E1',\n        },\n        {\n          name: 'dunkel',\n          value: '#203864',\n        },\n      ],\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {
            "projects/fm-library/src/lib/fm-library.module.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "projects/fm-library/src/lib/fm-library.module.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "httpBackend",
                            "type": "HttpBackend",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpBackend",
                            "type": "HttpBackend",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/fm-library/src/lib/buttons/button/button.stories.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "httpBackend",
                            "type": "HttpBackend",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpBackend",
                            "type": "HttpBackend",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "httpBackend",
                            "type": "HttpBackend",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpBackend",
                            "type": "HttpBackend",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/fm-library/src/lib/info/tooltip/tooltip.stories.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "projects/fm-library/src/lib/info/tooltip/tooltip.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "httpBackend",
                            "type": "HttpBackend",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpBackend",
                            "type": "HttpBackend",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "httpBackend",
                            "type": "HttpBackend",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpBackend",
                            "type": "HttpBackend",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts": [
                {
                    "name": "HttpLoaderFactory",
                    "file": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "httpBackend",
                            "type": "HttpBackend",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "httpBackend",
                            "type": "HttpBackend",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/fm-library/src/lib/counter/counter.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<CounterComponent>",
                    "file": "projects/fm-library/src/lib/counter/counter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/buttons/button/button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonGroupComponent>",
                    "file": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderButtonComponent>",
                    "file": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/buttons/info-button/info-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InfoButtonComponent>",
                    "file": "projects/fm-library/src/lib/buttons/info-button/info-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ProgressButtonComponent>",
                    "file": "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<StateIconComponent>",
                    "file": "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/info/tooltip/tooltip.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TooltipComponent>",
                    "file": "projects/fm-library/src/lib/info/tooltip/tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<DropdownComponent>",
                    "file": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/inputs/input/input.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InputComponent>",
                    "file": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InputButtonComponent>",
                    "file": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InputDateComponent>",
                    "file": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TextAreaComponent>",
                    "file": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/text/header-text/header-text.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<HeaderTextComponent>",
                    "file": "projects/fm-library/src/lib/text/header-text/header-text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TileTextComponent>",
                    "file": "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/tiles/tile-checkbox/tile-checkbox.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TileCheckboxComponent>",
                    "file": "projects/fm-library/src/lib/tiles/tile-checkbox/tile-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/tiles/tile-checkbox-group/tile-checkbox-group.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TileCheckboxGroupComponent>",
                    "file": "projects/fm-library/src/lib/tiles/tile-checkbox-group/tile-checkbox-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TileGroupComponent>",
                    "file": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/tiles/tile-rating/tile-rating.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<TileRatingComponent>",
                    "file": "projects/fm-library/src/lib/tiles/tile-rating/tile-rating.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/toggle/toggle/toggle.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ToggleComponent>",
                    "file": "projects/fm-library/src/lib/toggle/toggle/toggle.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/toggle/toggle-checkbox/toggle-checkbox.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ToggleCheckboxComponent>",
                    "file": "projects/fm-library/src/lib/toggle/toggle-checkbox/toggle-checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ToggleHorizontalComponent>",
                    "file": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ToggleTristateComponent>",
                    "file": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ],
            "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ToggleVerticalComponent>",
                    "file": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 177
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/fm-library/.storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button-group/button-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testButtons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testButtonsCustomWidth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button-group/button-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withCustomWidth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "customWidth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DisabledDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconLeftDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconRightDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/header-button/header-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Active",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/header-button/header-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Inactive",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/info-button/info-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InfoButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/info-button/info-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/info-button/info-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/progress-button/progress-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProgressButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dashboard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/buttons/progress-button/progress-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Ende",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/counter/counter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CounterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/counter/counter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/counter/counter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/fm-library.module.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/icons/state-icon/state-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StateIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Optional",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/icons/state-icon/state-icon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/info/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/info/tooltip/tooltip.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/info/tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/info/tooltip/tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/dropdown/dropdown.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DropdownComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "placeholderTest",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testItems",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/dropdown/dropdown.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInfoDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-button/input-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "noValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "short",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "shortDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "warningDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-button/input-button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withInfoDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-date/input-date.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputDateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInfoDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithMaxDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input-date/input-date.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithSelectedDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/48",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "currency",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "successDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/input/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withInfoDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/text-area/text-area.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextAreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DefaultDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "multipleRows",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "multipleRowsTouched",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/inputs/text-area/text-area.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "withInfoDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/services/helper.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "HelperService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/text/header-text/header-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/text/header-text/header-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/text/header-text/header-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/text/header-text/header-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/text/header-text/header-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInfoDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/text/tile-text/tile-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TileTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/text/tile-text/tile-text.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithInfoDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/tiles/tile-checkbox-group/tile-checkbox-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TileCheckboxGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/tiles/tile-checkbox-group/tile-checkbox-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/tiles/tile-checkbox-group/tile-checkbox-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testTiles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/tiles/tile-checkbox/tile-checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TileCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/tiles/tile-checkbox/tile-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/tiles/tile-group/tile-group.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TileGroupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "HttpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testTiles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/tiles/tile-group/tile-group.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testTilesDark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/tiles/tile-rating/tile-rating.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TileRatingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/tiles/tile-rating/tile-rating.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default4Stars",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/tiles/tile-rating/tile-rating.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default5Stars",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/tiles/tile/tile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-checkbox/toggle-checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-checkbox/toggle-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-checkbox/toggle-checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleHorizontalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/19",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FiveOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testOptions3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-horizontal/toggle-horizontal.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testOptions5",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleTristateComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testTabsThree",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testTabsTwo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-tristate/toggle-tristate.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TwoTabs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleVerticalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "FiveOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "multiLine",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testOptions2",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testOptions3",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle-vertical/toggle-vertical.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "testOptions5",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dark",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/lib/toggle/toggle/toggle.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/fm-library/src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}